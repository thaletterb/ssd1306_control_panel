   1               		.file	"ssd1306_control_panel.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  80               	.global	setup_adc
  82               	setup_adc:
  83               		.stabd	46,0,0
   1:ssd1306_control_panel.c **** /****************************************************************************
   2:ssd1306_control_panel.c **** Title:    SSD1306 Control Panel 
   3:ssd1306_control_panel.c **** Author:   Elegantcircuits.com
   4:ssd1306_control_panel.c **** File:     $Id: ssd1306_control_panel
   5:ssd1306_control_panel.c **** Software: AVR-GCC 3.3
   6:ssd1306_control_panel.c **** Hardware: Atmega328P AVR 
   7:ssd1306_control_panel.c **** 
   8:ssd1306_control_panel.c **** Description:
   9:ssd1306_control_panel.c ****     This example shows how to create an OLED based control panel based on user input
  10:ssd1306_control_panel.c **** 
  11:ssd1306_control_panel.c **** HW Description:
  12:ssd1306_control_panel.c **** 
  13:ssd1306_control_panel.c **** 
  14:ssd1306_control_panel.c **** *****************************************************************************/
  15:ssd1306_control_panel.c **** #include <avr/io.h>
  16:ssd1306_control_panel.c **** #include <avr/delay.h>
  17:ssd1306_control_panel.c **** #include <stdlib.h>
  18:ssd1306_control_panel.c **** #include "i2cmaster.h"
  19:ssd1306_control_panel.c **** #include "myFont.h"
  20:ssd1306_control_panel.c **** 
  21:ssd1306_control_panel.c **** #define DevSSD1306  0x78      // device address of SSD1306 OLED, uses 8-bit address (0x3c)!!! 
  22:ssd1306_control_panel.c **** 
  23:ssd1306_control_panel.c **** static uint8_t buffer[(128 * 64) / 8] = { // 128 x 64 
  24:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  25:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  26:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  27:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  28:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  29:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  30:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  31:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  32:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  33:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  34:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  35:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  36:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  37:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  38:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  39:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  40:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  41:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  42:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  43:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  44:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  45:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  46:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  47:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  48:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  49:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  50:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  51:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  52:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  53:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  54:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  55:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  56:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  57:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  58:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  59:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  60:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  61:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  62:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  63:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  64:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  65:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  66:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  67:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  68:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  69:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  70:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  71:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  72:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  73:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  74:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  75:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  76:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  77:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  78:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  79:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  80:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  81:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  82:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  83:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  84:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  85:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  86:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  87:ssd1306_control_panel.c ****     0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
  88:ssd1306_control_panel.c **** };
  89:ssd1306_control_panel.c **** 
  90:ssd1306_control_panel.c **** int main(void)
  91:ssd1306_control_panel.c **** {
  92:ssd1306_control_panel.c ****     unsigned char ret;
  93:ssd1306_control_panel.c **** 
  94:ssd1306_control_panel.c ****     DDRB  = 0xff;                              // use all pins on port B for output 
  95:ssd1306_control_panel.c ****     PORTB = 0x00;                              // (LED's low & off)
  96:ssd1306_control_panel.c **** 
  97:ssd1306_control_panel.c ****     i2c_init();                                // init I2C interface
  98:ssd1306_control_panel.c **** 
  99:ssd1306_control_panel.c ****     ret = i2c_start(DevSSD1306+I2C_WRITE);       // set device address and write mode
 100:ssd1306_control_panel.c ****     if ( ret ) {
 101:ssd1306_control_panel.c ****         /* failed to issue start condition, possibly no device found */
 102:ssd1306_control_panel.c ****         i2c_stop();
 103:ssd1306_control_panel.c ****         PORTB=0xff;                            // activate all 8 LED to show error */
 104:ssd1306_control_panel.c ****     }
 105:ssd1306_control_panel.c ****     else {
 106:ssd1306_control_panel.c ****     /* issuing start condition ok, device accessible */
 107:ssd1306_control_panel.c ****     setup_i2c();
 108:ssd1306_control_panel.c ****     setup_adc();
 109:ssd1306_control_panel.c ****     }
 110:ssd1306_control_panel.c ****     for(;;){
 111:ssd1306_control_panel.c ****         clearBuffer(buffer);
 112:ssd1306_control_panel.c **** 
 113:ssd1306_control_panel.c ****         // get accelerometer values
 114:ssd1306_control_panel.c ****         sample_adc_channel(1);
 115:ssd1306_control_panel.c ****         sample_adc_channel(2);
 116:ssd1306_control_panel.c ****         sample_adc_channel(3);
 117:ssd1306_control_panel.c **** 
 118:ssd1306_control_panel.c ****         PORTB=0x00;
 119:ssd1306_control_panel.c ****         drawBuffer(0, 0, buffer);
 120:ssd1306_control_panel.c ****         PORTB=0xFF;
 121:ssd1306_control_panel.c ****         _delay_ms(500);
 122:ssd1306_control_panel.c **** 
 123:ssd1306_control_panel.c ****     }
 124:ssd1306_control_panel.c **** }
 125:ssd1306_control_panel.c **** 
 126:ssd1306_control_panel.c **** void setup_adc(){
  85               	.LM0:
  86               	.LFBB1:
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 0 */
  90               	.L__stack_usage = 0
 127:ssd1306_control_panel.c ****     ADCSRA |= ((1<<ADPS1)|(1<<ADPS0));   // setups up ADC clock prescalar to 16
  92               	.LM1:
  93 0000 EAE7      		ldi r30,lo8(122)
  94 0002 F0E0      		ldi r31,0
  95 0004 8081      		ld r24,Z
  96 0006 8360      		ori r24,lo8(3)
  97 0008 8083      		st Z,r24
 128:ssd1306_control_panel.c ****     ADMUX |= (1<<REFS0);                            // set ref voltage to AVCC
  99               	.LM2:
 100 000a ACE7      		ldi r26,lo8(124)
 101 000c B0E0      		ldi r27,0
 102 000e 8C91      		ld r24,X
 103 0010 8064      		ori r24,lo8(64)
 104 0012 8C93      		st X,r24
 129:ssd1306_control_panel.c ****     //ADMUX |= (1<<ADLAR);                            // left align results in ADC registers (10 bi
 130:ssd1306_control_panel.c **** 
 131:ssd1306_control_panel.c ****     ADCSRB &= ~(1<<ADTS2);  // These three cleared should enable free-running mode
 106               	.LM3:
 107 0014 ABE7      		ldi r26,lo8(123)
 108 0016 B0E0      		ldi r27,0
 109 0018 8C91      		ld r24,X
 110 001a 8B7F      		andi r24,lo8(-5)
 111 001c 8C93      		st X,r24
 132:ssd1306_control_panel.c ****     ADCSRB &= ~(1<<ADTS1);
 113               	.LM4:
 114 001e 8C91      		ld r24,X
 115 0020 8D7F      		andi r24,lo8(-3)
 116 0022 8C93      		st X,r24
 133:ssd1306_control_panel.c ****     ADCSRB &= ~(1<<ADTS0); 
 118               	.LM5:
 119 0024 8C91      		ld r24,X
 120 0026 8E7F      		andi r24,lo8(-2)
 121 0028 8C93      		st X,r24
 134:ssd1306_control_panel.c **** 
 135:ssd1306_control_panel.c ****     ADCSRA |= (1<<ADATE);                           // ??
 123               	.LM6:
 124 002a 8081      		ld r24,Z
 125 002c 8062      		ori r24,lo8(32)
 126 002e 8083      		st Z,r24
 136:ssd1306_control_panel.c ****     ADCSRA |= (1<<ADEN);                            // enable
 128               	.LM7:
 129 0030 8081      		ld r24,Z
 130 0032 8068      		ori r24,lo8(-128)
 131 0034 8083      		st Z,r24
 137:ssd1306_control_panel.c **** 
 138:ssd1306_control_panel.c ****     ADCSRA |= (1<<ADSC);                            // start sampling
 133               	.LM8:
 134 0036 8081      		ld r24,Z
 135 0038 8064      		ori r24,lo8(64)
 136 003a 8083      		st Z,r24
 137 003c 0895      		ret
 139               	.Lscope1:
 141               		.stabd	78,0,0
 143               	.global	setup_i2c
 145               	setup_i2c:
 146               		.stabd	46,0,0
 139:ssd1306_control_panel.c **** 
 140:ssd1306_control_panel.c **** }
 141:ssd1306_control_panel.c **** void sample_adc_channel(uint8_t channel){
 142:ssd1306_control_panel.c ****     ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));    // Clear ADC Mux Bits
 143:ssd1306_control_panel.c ****     if(channel == 1){
 144:ssd1306_control_panel.c ****         ADMUX |= (1<<MUX0);                             // setup ADC Channel 1
 145:ssd1306_control_panel.c ****         uint16_t adcVal;
 146:ssd1306_control_panel.c ****         char valueIn[4];
 147:ssd1306_control_panel.c **** 
 148:ssd1306_control_panel.c ****         lcd_draw_string(0, 0, "ADXL335 Readings: " , buffer);
 149:ssd1306_control_panel.c **** 
 150:ssd1306_control_panel.c ****         ADCSRA |= (1 << ADSC); // Start a new conversion, 
 151:ssd1306_control_panel.c ****         adcVal = ADC;       // 10 bit reading
 152:ssd1306_control_panel.c ****         itoa(adcVal, valueIn, 10);
 153:ssd1306_control_panel.c ****         lcd_draw_string(0,2, "X: " , buffer);
 154:ssd1306_control_panel.c ****         lcd_draw_string(13, 2, valueIn, buffer);
 155:ssd1306_control_panel.c ****     }
 156:ssd1306_control_panel.c ****     else if(channel == 2){
 157:ssd1306_control_panel.c ****         ADMUX |= (1<<MUX1);                             // setup ADC Channel 2
 158:ssd1306_control_panel.c ****         uint16_t adcVal;
 159:ssd1306_control_panel.c ****         char valueIn[4];
 160:ssd1306_control_panel.c **** 
 161:ssd1306_control_panel.c ****         ADCSRA |= (1 << ADSC); // Start a new conversion, 
 162:ssd1306_control_panel.c ****         adcVal = ADC;       // 10 bit reading
 163:ssd1306_control_panel.c ****         itoa(adcVal, valueIn, 10);
 164:ssd1306_control_panel.c ****         lcd_draw_string(0, 3, "Y: ", buffer);
 165:ssd1306_control_panel.c ****         lcd_draw_string(13, 3, valueIn, buffer);
 166:ssd1306_control_panel.c ****     }
 167:ssd1306_control_panel.c ****     else if(channel == 3){
 168:ssd1306_control_panel.c ****         ADMUX |= ((1<<MUX1)|(1<<MUX0));                 // setup ADC Channel 3
 169:ssd1306_control_panel.c ****         uint16_t adcVal;
 170:ssd1306_control_panel.c ****         char valueIn[4];
 171:ssd1306_control_panel.c **** 
 172:ssd1306_control_panel.c ****         ADCSRA |= (1 << ADSC); // Start a new conversion, 
 173:ssd1306_control_panel.c ****         adcVal = ADC;       // 10 bit reading
 174:ssd1306_control_panel.c ****         itoa(adcVal, valueIn, 10);
 175:ssd1306_control_panel.c ****         lcd_draw_string(0, 4, "Z: ", buffer);
 176:ssd1306_control_panel.c ****         lcd_draw_string(13, 4, valueIn, buffer);
 177:ssd1306_control_panel.c ****     }
 178:ssd1306_control_panel.c **** 
 179:ssd1306_control_panel.c **** 
 180:ssd1306_control_panel.c **** }
 181:ssd1306_control_panel.c **** 
 182:ssd1306_control_panel.c **** void setup_i2c(){
 148               	.LM9:
 149               	.LFBB2:
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
 183:ssd1306_control_panel.c ****     // Init sequence for 128x64 OLED module
 184:ssd1306_control_panel.c ****     i2c_write(0xAE);                    // Display Off
 155               	.LM10:
 156 003e 8EEA      		ldi r24,lo8(-82)
 157 0040 0E94 0000 		call i2c_write
 185:ssd1306_control_panel.c ****     
 186:ssd1306_control_panel.c ****     i2c_write(0x00 | 0x0);            // low col = 0
 159               	.LM11:
 160 0044 80E0      		ldi r24,0
 161 0046 0E94 0000 		call i2c_write
 187:ssd1306_control_panel.c ****     i2c_write(0x10 | 0x0);           // hi col = 0
 163               	.LM12:
 164 004a 80E1      		ldi r24,lo8(16)
 165 004c 0E94 0000 		call i2c_write
 188:ssd1306_control_panel.c ****     i2c_write(0x40 | 0x0);            // line #0
 167               	.LM13:
 168 0050 80E4      		ldi r24,lo8(64)
 169 0052 0E94 0000 		call i2c_write
 189:ssd1306_control_panel.c **** 
 190:ssd1306_control_panel.c ****     i2c_write(0x81);                   // Set Contrast 0x81
 171               	.LM14:
 172 0056 81E8      		ldi r24,lo8(-127)
 173 0058 0E94 0000 		call i2c_write
 191:ssd1306_control_panel.c ****     i2c_write(0xCF);
 175               	.LM15:
 176 005c 8FEC      		ldi r24,lo8(-49)
 177 005e 0E94 0000 		call i2c_write
 192:ssd1306_control_panel.c ****                                         // flips display
 193:ssd1306_control_panel.c ****     i2c_write(0xA1);                    // Segremap - 0xA1
 179               	.LM16:
 180 0062 81EA      		ldi r24,lo8(-95)
 181 0064 0E94 0000 		call i2c_write
 194:ssd1306_control_panel.c ****     i2c_write(0xC8);                    // COMSCAN DEC 0xC8 C0
 183               	.LM17:
 184 0068 88EC      		ldi r24,lo8(-56)
 185 006a 0E94 0000 		call i2c_write
 195:ssd1306_control_panel.c ****     i2c_write(0xA6);                    // Normal Display 0xA6 (Invert A7)
 187               	.LM18:
 188 006e 86EA      		ldi r24,lo8(-90)
 189 0070 0E94 0000 		call i2c_write
 196:ssd1306_control_panel.c ****     
 197:ssd1306_control_panel.c ****     i2c_write(0xA4);                // DISPLAY ALL ON RESUME - 0xA4
 191               	.LM19:
 192 0074 84EA      		ldi r24,lo8(-92)
 193 0076 0E94 0000 		call i2c_write
 198:ssd1306_control_panel.c ****     i2c_write(0xA8);                    // Set Multiplex 0xA8
 195               	.LM20:
 196 007a 88EA      		ldi r24,lo8(-88)
 197 007c 0E94 0000 		call i2c_write
 199:ssd1306_control_panel.c ****     i2c_write(0x3F);                    // 1/64 Duty Cycle 
 199               	.LM21:
 200 0080 8FE3      		ldi r24,lo8(63)
 201 0082 0E94 0000 		call i2c_write
 200:ssd1306_control_panel.c **** 
 201:ssd1306_control_panel.c ****     i2c_write(0xD3);                    // Set Display Offset 0xD3
 203               	.LM22:
 204 0086 83ED      		ldi r24,lo8(-45)
 205 0088 0E94 0000 		call i2c_write
 202:ssd1306_control_panel.c ****     i2c_write(0x0);                     // no offset
 207               	.LM23:
 208 008c 80E0      		ldi r24,0
 209 008e 0E94 0000 		call i2c_write
 203:ssd1306_control_panel.c **** 
 204:ssd1306_control_panel.c ****     i2c_write(0xD5);                    // Set Display Clk Div 0xD5
 211               	.LM24:
 212 0092 85ED      		ldi r24,lo8(-43)
 213 0094 0E94 0000 		call i2c_write
 205:ssd1306_control_panel.c ****     i2c_write(0x80);                    // Recommneded resistor ratio 0x80
 215               	.LM25:
 216 0098 80E8      		ldi r24,lo8(-128)
 217 009a 0E94 0000 		call i2c_write
 206:ssd1306_control_panel.c **** 
 207:ssd1306_control_panel.c ****     i2c_write(0xD9);                  // Set Precharge 0xd9
 219               	.LM26:
 220 009e 89ED      		ldi r24,lo8(-39)
 221 00a0 0E94 0000 		call i2c_write
 208:ssd1306_control_panel.c ****     i2c_write(0xF1);
 223               	.LM27:
 224 00a4 81EF      		ldi r24,lo8(-15)
 225 00a6 0E94 0000 		call i2c_write
 209:ssd1306_control_panel.c **** 
 210:ssd1306_control_panel.c ****     i2c_write(0xDA);                    // Set COM Pins0xDA
 227               	.LM28:
 228 00aa 8AED      		ldi r24,lo8(-38)
 229 00ac 0E94 0000 		call i2c_write
 211:ssd1306_control_panel.c ****     i2c_write(0x12);
 231               	.LM29:
 232 00b0 82E1      		ldi r24,lo8(18)
 233 00b2 0E94 0000 		call i2c_write
 212:ssd1306_control_panel.c **** 
 213:ssd1306_control_panel.c ****     i2c_write(0xDB);                 // Set VCOM Detect - 0xDB
 235               	.LM30:
 236 00b6 8BED      		ldi r24,lo8(-37)
 237 00b8 0E94 0000 		call i2c_write
 214:ssd1306_control_panel.c ****     i2c_write(0x40);
 239               	.LM31:
 240 00bc 80E4      		ldi r24,lo8(64)
 241 00be 0E94 0000 		call i2c_write
 215:ssd1306_control_panel.c **** 
 216:ssd1306_control_panel.c ****     i2c_write(0x20);                    // Set Memory Addressing Mode
 243               	.LM32:
 244 00c2 80E2      		ldi r24,lo8(32)
 245 00c4 0E94 0000 		call i2c_write
 217:ssd1306_control_panel.c ****     i2c_write(0x00);                    // 0x00 - Horizontal
 247               	.LM33:
 248 00c8 80E0      		ldi r24,0
 249 00ca 0E94 0000 		call i2c_write
 218:ssd1306_control_panel.c **** 
 219:ssd1306_control_panel.c ****     i2c_write(0x40 | 0x0);              // Set start line at line 0 - 0x40 
 251               	.LM34:
 252 00ce 80E4      		ldi r24,lo8(64)
 253 00d0 0E94 0000 		call i2c_write
 220:ssd1306_control_panel.c **** 
 221:ssd1306_control_panel.c ****     i2c_write(0x8D);                    // Charge Pump -0x8D
 255               	.LM35:
 256 00d4 8DE8      		ldi r24,lo8(-115)
 257 00d6 0E94 0000 		call i2c_write
 222:ssd1306_control_panel.c ****     i2c_write(0x14); 
 259               	.LM36:
 260 00da 84E1      		ldi r24,lo8(20)
 261 00dc 0E94 0000 		call i2c_write
 223:ssd1306_control_panel.c **** 
 224:ssd1306_control_panel.c **** 
 225:ssd1306_control_panel.c ****     i2c_write(0xA4);              //--turn on all pixels - A5. Regular mode A4
 263               	.LM37:
 264 00e0 84EA      		ldi r24,lo8(-92)
 265 00e2 0E94 0000 		call i2c_write
 226:ssd1306_control_panel.c ****     i2c_write(0xAF);                //--turn on oled panel - AF
 267               	.LM38:
 268 00e6 8FEA      		ldi r24,lo8(-81)
 269 00e8 0C94 0000 		jmp i2c_write
 271               	.Lscope2:
 273               		.stabd	78,0,0
 277               	.global	drawPixel
 279               	drawPixel:
 280               		.stabd	46,0,0
 227:ssd1306_control_panel.c **** }
 228:ssd1306_control_panel.c **** void drawPixel(int16_t x, int16_t y){//, int16_t color){
 282               	.LM39:
 283               	.LFBB3:
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 0 */
 287               	.L__stack_usage = 0
 229:ssd1306_control_panel.c **** //void drawPixel(int16_t x, int16_t y, int16_t color){
 230:ssd1306_control_panel.c ****     buffer[x+(y/8)*128] |= (1 << (y & 7));
 289               	.LM40:
 290 00ec FB01      		movw r30,r22
 291 00ee 77FD      		sbrc r23,7
 292 00f0 3796      		adiw r30,7
 293               	.L4:
 294 00f2 23E0      		ldi r18,3
 295               		1:
 296 00f4 F595      		asr r31
 297 00f6 E795      		ror r30
 298 00f8 2A95      		dec r18
 299 00fa 01F4      		brne 1b
 300 00fc F695      		lsr r31
 301 00fe FE2F      		mov r31,r30
 302 0100 EE27      		clr r30
 303 0102 F795      		ror r31
 304 0104 E795      		ror r30
 305 0106 E80F      		add r30,r24
 306 0108 F91F      		adc r31,r25
 307 010a E050      		subi r30,lo8(-(buffer))
 308 010c F040      		sbci r31,hi8(-(buffer))
 309 010e 6770      		andi r22,7
 310 0110 7727      		clr r23
 311 0112 81E0      		ldi r24,lo8(1)
 312 0114 90E0      		ldi r25,0
 313 0116 062E      		mov r0,r22
 314 0118 00C0      		rjmp 2f
 315               		1:
 316 011a 880F      		lsl r24
 317               		2:
 318 011c 0A94      		dec r0
 319 011e 02F4      		brpl 1b
 320 0120 9081      		ld r25,Z
 321 0122 982B      		or r25,r24
 322 0124 9083      		st Z,r25
 323 0126 0895      		ret
 325               	.Lscope3:
 327               		.stabd	78,0,0
 329               	.global	clearBuffer
 331               	clearBuffer:
 332               		.stabd	46,0,0
 231:ssd1306_control_panel.c **** }
 232:ssd1306_control_panel.c **** 
 233:ssd1306_control_panel.c **** void clearBuffer(uint8_t *buff){
 334               	.LM41:
 335               	.LFBB4:
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 234:ssd1306_control_panel.c ****     memset(buff, 0, ((128 * 64)/8));
 341               	.LM42:
 342 0128 FC01      		movw r30,r24
 343 012a 80E0      		ldi r24,0
 344 012c 94E0      		ldi r25,lo8(4)
 345 012e DF01      		movw r26,r30
 346 0130 9C01      		movw r18,r24
 347               		0:
 348 0132 1D92      		st X+,__zero_reg__
 349 0134 2150      		subi r18,1
 350 0136 3040      		sbci r19,0
 351 0138 01F4      		brne 0b
 352 013a 0895      		ret
 354               	.Lscope4:
 356               		.stabd	78,0,0
 361               	.global	drawBuffer
 363               	drawBuffer:
 364               		.stabd	46,0,0
 235:ssd1306_control_panel.c **** }
 236:ssd1306_control_panel.c **** 
 237:ssd1306_control_panel.c **** void drawBuffer(uint8_t column_address, uint8_t page_address, uint8_t *buff){
 366               	.LM43:
 367               	.LFBB5:
 368 013c AF92      		push r10
 369 013e BF92      		push r11
 370 0140 CF92      		push r12
 371 0142 DF92      		push r13
 372 0144 EF92      		push r14
 373 0146 FF92      		push r15
 374 0148 0F93      		push r16
 375 014a 1F93      		push r17
 376 014c CF93      		push r28
 377 014e DF93      		push r29
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 10 */
 381               	.L__stack_usage = 10
 382 0150 7A01      		movw r14,r20
 238:ssd1306_control_panel.c ****     i2c_start(DevSSD1306+I2C_WRITE); 
 384               	.LM44:
 385 0152 88E7      		ldi r24,lo8(120)
 386 0154 0E94 0000 		call i2c_start
 239:ssd1306_control_panel.c ****     i2c_write(0x21);        // column address
 388               	.LM45:
 389 0158 81E2      		ldi r24,lo8(33)
 390 015a 0E94 0000 		call i2c_write
 240:ssd1306_control_panel.c ****     i2c_write(0);           // column start address (0 = reset)
 392               	.LM46:
 393 015e 80E0      		ldi r24,0
 394 0160 0E94 0000 		call i2c_write
 241:ssd1306_control_panel.c ****     i2c_write(127);         // column end addres (127 = reset)
 396               	.LM47:
 397 0164 8FE7      		ldi r24,lo8(127)
 398 0166 0E94 0000 		call i2c_write
 242:ssd1306_control_panel.c **** 
 243:ssd1306_control_panel.c ****     i2c_write(0x22);        // page address
 400               	.LM48:
 401 016a 82E2      		ldi r24,lo8(34)
 402 016c 0E94 0000 		call i2c_write
 244:ssd1306_control_panel.c ****     i2c_write(0);           // page start address (0 = reset);
 404               	.LM49:
 405 0170 80E0      		ldi r24,0
 406 0172 0E94 0000 		call i2c_write
 245:ssd1306_control_panel.c ****     i2c_write(7);           // page end address
 408               	.LM50:
 409 0176 87E0      		ldi r24,lo8(7)
 410 0178 0E94 0000 		call i2c_write
 246:ssd1306_control_panel.c **** 
 247:ssd1306_control_panel.c ****     uint8_t twbrbackup = TWBR;
 412               	.LM51:
 413 017c B090 B800 		lds r11,184
 248:ssd1306_control_panel.c ****     TWBR = 12;
 415               	.LM52:
 416 0180 8CE0      		ldi r24,lo8(12)
 417 0182 8093 B800 		sts 184,r24
 249:ssd1306_control_panel.c **** 
 250:ssd1306_control_panel.c ****     for (uint16_t i=0; i<((128*64)/8); i++){
 419               	.LM53:
 420 0186 C0E0      		ldi r28,0
 421 0188 D0E0      		ldi r29,0
 422               	.LBB6:
 423               	.LBB7:
 251:ssd1306_control_panel.c ****         unsigned char ret = i2c_start(DevSSD1306+I2C_WRITE);   // set device address and write mode
 252:ssd1306_control_panel.c ****         if ( ret ) {
 253:ssd1306_control_panel.c ****             /* failed to issue start condition, possibly no device found */
 254:ssd1306_control_panel.c ****             i2c_stop();
 255:ssd1306_control_panel.c ****             PORTB=0xff;                            // activate all 8 LED to show error */
 425               	.LM54:
 426 018a AA24      		clr r10
 427 018c AA94      		dec r10
 428               	.L10:
 251:ssd1306_control_panel.c ****         unsigned char ret = i2c_start(DevSSD1306+I2C_WRITE);   // set device address and write mode
 430               	.LM55:
 431 018e 88E7      		ldi r24,lo8(120)
 432 0190 0E94 0000 		call i2c_start
 252:ssd1306_control_panel.c ****         if ( ret ) {
 434               	.LM56:
 435 0194 8823      		tst r24
 436 0196 01F0      		breq .L7
 254:ssd1306_control_panel.c ****             i2c_stop();
 438               	.LM57:
 439 0198 0E94 0000 		call i2c_stop
 441               	.LM58:
 442 019c A5B8      		out 0x5,r10
 443 019e 00C0      		rjmp .L8
 444               	.L7:
 256:ssd1306_control_panel.c ****         }
 257:ssd1306_control_panel.c ****         else {
 258:ssd1306_control_panel.c ****             i2c_write(0x40);                        // set display RAM display start line register
 446               	.LM59:
 447 01a0 80E4      		ldi r24,lo8(64)
 448 01a2 0E94 0000 		call i2c_write
 449 01a6 00E0      		ldi r16,0
 450 01a8 10E0      		ldi r17,0
 451               	.LBB8:
 237:ssd1306_control_panel.c **** void drawBuffer(uint8_t column_address, uint8_t page_address, uint8_t *buff){
 453               	.LM60:
 454 01aa 6701      		movw r12,r14
 455 01ac CC0E      		add r12,r28
 456 01ae DD1E      		adc r13,r29
 457               	.L9:
 237:ssd1306_control_panel.c **** void drawBuffer(uint8_t column_address, uint8_t page_address, uint8_t *buff){
 459               	.LM61:
 460 01b0 F601      		movw r30,r12
 461 01b2 E00F      		add r30,r16
 462 01b4 F11F      		adc r31,r17
 259:ssd1306_control_panel.c ****             for (uint8_t x=0; x<16; x++){
 260:ssd1306_control_panel.c ****                 i2c_write(buff[i]);
 464               	.LM62:
 465 01b6 8081      		ld r24,Z
 466 01b8 0E94 0000 		call i2c_write
 467 01bc 0F5F      		subi r16,-1
 468 01be 1F4F      		sbci r17,-1
 259:ssd1306_control_panel.c ****             for (uint8_t x=0; x<16; x++){
 470               	.LM63:
 471 01c0 0031      		cpi r16,16
 472 01c2 1105      		cpc r17,__zero_reg__
 473 01c4 01F4      		brne .L9
 474 01c6 2F96      		adiw r28,15
 475               	.LBE8:
 261:ssd1306_control_panel.c ****                 i++;
 262:ssd1306_control_panel.c ****             }
 263:ssd1306_control_panel.c ****             i--;
 264:ssd1306_control_panel.c ****             i2c_stop();
 477               	.LM64:
 478 01c8 0E94 0000 		call i2c_stop
 265:ssd1306_control_panel.c ****             TWBR = twbrbackup;
 480               	.LM65:
 481 01cc B092 B800 		sts 184,r11
 482               	.L8:
 483               	.LBE7:
 250:ssd1306_control_panel.c ****     for (uint16_t i=0; i<((128*64)/8); i++){
 485               	.LM66:
 486 01d0 2196      		adiw r28,1
 487 01d2 C115      		cp r28,__zero_reg__
 488 01d4 84E0      		ldi r24,4
 489 01d6 D807      		cpc r29,r24
 490 01d8 00F0      		brlo .L10
 491               	/* epilogue start */
 492               	.LBE6:
 266:ssd1306_control_panel.c ****         }
 267:ssd1306_control_panel.c ****     }
 268:ssd1306_control_panel.c **** }
 494               	.LM67:
 495 01da DF91      		pop r29
 496 01dc CF91      		pop r28
 497 01de 1F91      		pop r17
 498 01e0 0F91      		pop r16
 499 01e2 FF90      		pop r15
 500 01e4 EF90      		pop r14
 501 01e6 DF90      		pop r13
 502 01e8 CF90      		pop r12
 503 01ea BF90      		pop r11
 504 01ec AF90      		pop r10
 505 01ee 0895      		ret
 513               	.Lscope5:
 515               		.stabd	78,0,0
 521               	.global	lcd_draw_char
 523               	lcd_draw_char:
 524               		.stabd	46,0,0
 269:ssd1306_control_panel.c **** 
 270:ssd1306_control_panel.c **** void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff){
 526               	.LM68:
 527               	.LFBB6:
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 0 */
 531               	.L__stack_usage = 0
 532               	.LBB9:
 271:ssd1306_control_panel.c ****     uint8_t ascii_offset = 32;
 272:ssd1306_control_panel.c ****     for(uint8_t i=0; i<5; i++){
 273:ssd1306_control_panel.c ****         buff[i+((page*128)+column)] = Ascii_1[letter-ascii_offset][i];
 534               	.LM69:
 535 01f0 90E0      		ldi r25,0
 536 01f2 50E8      		ldi r21,lo8(-128)
 537 01f4 659F      		mul r22,r21
 538 01f6 800D      		add r24,r0
 539 01f8 911D      		adc r25,r1
 540 01fa 1124      		clr __zero_reg__
 270:ssd1306_control_panel.c **** void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff){
 542               	.LM70:
 543 01fc 280F      		add r18,r24
 544 01fe 391F      		adc r19,r25
 545 0200 85E0      		ldi r24,lo8(5)
 546 0202 489F      		mul r20,r24
 547 0204 A001      		movw r20,r0
 548 0206 1124      		clr __zero_reg__
 549 0208 4050      		subi r20,lo8(-(Ascii_1))
 550 020a 5040      		sbci r21,hi8(-(Ascii_1))
 551               	.LBE9:
 552 020c 80E0      		ldi r24,0
 553 020e 90E0      		ldi r25,0
 554               	.L14:
 555               	.LBB10:
 270:ssd1306_control_panel.c **** void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff){
 557               	.LM71:
 558 0210 FA01      		movw r30,r20
 559 0212 E80F      		add r30,r24
 560 0214 F91F      		adc r31,r25
 561 0216 E05A      		subi r30,-96
 562 0218 F109      		sbc r31,__zero_reg__
 564               	.LM72:
 565 021a 6081      		ld r22,Z
 566 021c F901      		movw r30,r18
 567 021e 6193      		st Z+,r22
 568 0220 9F01      		movw r18,r30
 569 0222 0196      		adiw r24,1
 272:ssd1306_control_panel.c ****     for(uint8_t i=0; i<5; i++){
 571               	.LM73:
 572 0224 8530      		cpi r24,5
 573 0226 9105      		cpc r25,__zero_reg__
 574 0228 01F4      		brne .L14
 575               	/* epilogue start */
 576               	.LBE10:
 274:ssd1306_control_panel.c ****     }
 275:ssd1306_control_panel.c **** }
 578               	.LM74:
 579 022a 0895      		ret
 581               	.Lscope6:
 583               		.stabd	78,0,0
 588               	.global	lcd_draw_string
 590               	lcd_draw_string:
 591               		.stabd	46,0,0
 276:ssd1306_control_panel.c **** void lcd_draw_string(uint8_t column, uint8_t page, char *string, uint8_t *buff){
 593               	.LM75:
 594               	.LFBB7:
 595 022c CF92      		push r12
 596 022e DF92      		push r13
 597 0230 FF92      		push r15
 598 0232 0F93      		push r16
 599 0234 1F93      		push r17
 600 0236 CF93      		push r28
 601 0238 DF93      		push r29
 602 023a 1F92      		push __zero_reg__
 603 023c CDB7      		in r28,__SP_L__
 604 023e DEB7      		in r29,__SP_H__
 605               	/* prologue: function */
 606               	/* frame size = 1 */
 607               	/* stack size = 8 */
 608               	.L__stack_usage = 8
 609 0240 982F      		mov r25,r24
 610 0242 F62E      		mov r15,r22
 611 0244 8901      		movw r16,r18
 612 0246 6A01      		movw r12,r20
 277:ssd1306_control_panel.c ****     uint8_t i = 0;
 278:ssd1306_control_panel.c ****     while(string[0] != 0){
 614               	.LM76:
 615 0248 00C0      		rjmp .L17
 616               	.L18:
 279:ssd1306_control_panel.c ****         //column += 6; // 6 pixels wide
 280:ssd1306_control_panel.c ****         //if (column + 6 >= 128) {
 281:ssd1306_control_panel.c ****         //  column = 0;    // ran out of this line
 282:ssd1306_control_panel.c ****         //  page++;
 283:ssd1306_control_panel.c ****         //}
 284:ssd1306_control_panel.c ****         //if (page >= 8)
 285:ssd1306_control_panel.c ****         //  return;        // ran out of space :(
 286:ssd1306_control_panel.c ****         lcd_draw_char(column+(5*i), page, (string[0]), buff);
 618               	.LM77:
 619 024a 9801      		movw r18,r16
 620 024c 6F2D      		mov r22,r15
 621 024e 892F      		mov r24,r25
 622 0250 9983      		std Y+1,r25
 623 0252 0E94 0000 		call lcd_draw_char
 624 0256 9981      		ldd r25,Y+1
 625 0258 9B5F      		subi r25,lo8(-(5))
 626               	.L17:
 278:ssd1306_control_panel.c ****     while(string[0] != 0){
 628               	.LM78:
 629 025a F601      		movw r30,r12
 630 025c 4191      		ld r20,Z+
 631 025e 6F01      		movw r12,r30
 632 0260 4111      		cpse r20,__zero_reg__
 633 0262 00C0      		rjmp .L18
 634               	/* epilogue start */
 287:ssd1306_control_panel.c ****         string++;
 288:ssd1306_control_panel.c ****         i++;
 289:ssd1306_control_panel.c ****     }
 290:ssd1306_control_panel.c **** }
 636               	.LM79:
 637 0264 0F90      		pop __tmp_reg__
 638 0266 DF91      		pop r29
 639 0268 CF91      		pop r28
 640 026a 1F91      		pop r17
 641 026c 0F91      		pop r16
 642 026e FF90      		pop r15
 643 0270 DF90      		pop r13
 644 0272 CF90      		pop r12
 645 0274 0895      		ret
 647               	.Lscope7:
 649               		.stabd	78,0,0
 650               		.section	.rodata.str1.1,"aMS",@progbits,1
 651               	.LC0:
 652 0000 4144 584C 		.string	"ADXL335 Readings: "
 652      3333 3520 
 652      5265 6164 
 652      696E 6773 
 652      3A20 00
 653               	.LC1:
 654 0013 583A 2000 		.string	"X: "
 655               	.LC2:
 656 0017 593A 2000 		.string	"Y: "
 657               	.LC3:
 658 001b 5A3A 2000 		.string	"Z: "
 659               		.text
 662               	.global	sample_adc_channel
 664               	sample_adc_channel:
 665               		.stabd	46,0,0
 141:ssd1306_control_panel.c **** void sample_adc_channel(uint8_t channel){
 667               	.LM80:
 668               	.LFBB8:
 669 0276 CF93      		push r28
 670 0278 DF93      		push r29
 671 027a 00D0      		rcall .
 672 027c 00D0      		rcall .
 673 027e CDB7      		in r28,__SP_L__
 674 0280 DEB7      		in r29,__SP_H__
 675               	/* prologue: function */
 676               	/* frame size = 4 */
 677               	/* stack size = 6 */
 678               	.L__stack_usage = 6
 142:ssd1306_control_panel.c ****     ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));    // Clear ADC Mux Bits
 680               	.LM81:
 681 0282 9091 7C00 		lds r25,124
 682 0286 907F      		andi r25,lo8(-16)
 683 0288 9093 7C00 		sts 124,r25
 143:ssd1306_control_panel.c ****     if(channel == 1){
 685               	.LM82:
 686 028c 8130      		cpi r24,lo8(1)
 687 028e 01F4      		brne .L20
 688               	.LBB11:
 144:ssd1306_control_panel.c ****         ADMUX |= (1<<MUX0);                             // setup ADC Channel 1
 690               	.LM83:
 691 0290 8091 7C00 		lds r24,124
 692 0294 8160      		ori r24,lo8(1)
 693 0296 8093 7C00 		sts 124,r24
 148:ssd1306_control_panel.c ****         lcd_draw_string(0, 0, "ADXL335 Readings: " , buffer);
 695               	.LM84:
 696 029a 20E0      		ldi r18,lo8(buffer)
 697 029c 30E0      		ldi r19,hi8(buffer)
 698 029e 40E0      		ldi r20,lo8(.LC0)
 699 02a0 50E0      		ldi r21,hi8(.LC0)
 700 02a2 60E0      		ldi r22,0
 701 02a4 70E0      		ldi r23,0
 702 02a6 80E0      		ldi r24,0
 703 02a8 90E0      		ldi r25,0
 704 02aa 0E94 0000 		call lcd_draw_string
 150:ssd1306_control_panel.c ****         ADCSRA |= (1 << ADSC); // Start a new conversion, 
 706               	.LM85:
 707 02ae 8091 7A00 		lds r24,122
 708 02b2 8064      		ori r24,lo8(64)
 709 02b4 8093 7A00 		sts 122,r24
 151:ssd1306_control_panel.c ****         adcVal = ADC;       // 10 bit reading
 711               	.LM86:
 712 02b8 8091 7800 		lds r24,120
 713 02bc 9091 7900 		lds r25,120+1
 152:ssd1306_control_panel.c ****         itoa(adcVal, valueIn, 10);
 715               	.LM87:
 716 02c0 4AE0      		ldi r20,lo8(10)
 717 02c2 50E0      		ldi r21,0
 718 02c4 BE01      		movw r22,r28
 719 02c6 6F5F      		subi r22,-1
 720 02c8 7F4F      		sbci r23,-1
 721 02ca 0E94 0000 		call itoa
 153:ssd1306_control_panel.c ****         lcd_draw_string(0,2, "X: " , buffer);
 723               	.LM88:
 724 02ce 20E0      		ldi r18,lo8(buffer)
 725 02d0 30E0      		ldi r19,hi8(buffer)
 726 02d2 40E0      		ldi r20,lo8(.LC1)
 727 02d4 50E0      		ldi r21,hi8(.LC1)
 728 02d6 62E0      		ldi r22,lo8(2)
 729 02d8 70E0      		ldi r23,0
 730 02da 80E0      		ldi r24,0
 731 02dc 90E0      		ldi r25,0
 732 02de 0E94 0000 		call lcd_draw_string
 154:ssd1306_control_panel.c ****         lcd_draw_string(13, 2, valueIn, buffer);
 734               	.LM89:
 735 02e2 20E0      		ldi r18,lo8(buffer)
 736 02e4 30E0      		ldi r19,hi8(buffer)
 737 02e6 AE01      		movw r20,r28
 738 02e8 4F5F      		subi r20,-1
 739 02ea 5F4F      		sbci r21,-1
 740 02ec 62E0      		ldi r22,lo8(2)
 741 02ee 70E0      		ldi r23,0
 742 02f0 00C0      		rjmp .L23
 743               	.L20:
 744               	.LBE11:
 156:ssd1306_control_panel.c ****     else if(channel == 2){
 746               	.LM90:
 747 02f2 8230      		cpi r24,lo8(2)
 748 02f4 01F4      		brne .L22
 749               	.LBB12:
 157:ssd1306_control_panel.c ****         ADMUX |= (1<<MUX1);                             // setup ADC Channel 2
 751               	.LM91:
 752 02f6 8091 7C00 		lds r24,124
 753 02fa 8260      		ori r24,lo8(2)
 754 02fc 8093 7C00 		sts 124,r24
 161:ssd1306_control_panel.c ****         ADCSRA |= (1 << ADSC); // Start a new conversion, 
 756               	.LM92:
 757 0300 8091 7A00 		lds r24,122
 758 0304 8064      		ori r24,lo8(64)
 759 0306 8093 7A00 		sts 122,r24
 162:ssd1306_control_panel.c ****         adcVal = ADC;       // 10 bit reading
 761               	.LM93:
 762 030a 8091 7800 		lds r24,120
 763 030e 9091 7900 		lds r25,120+1
 163:ssd1306_control_panel.c ****         itoa(adcVal, valueIn, 10);
 765               	.LM94:
 766 0312 4AE0      		ldi r20,lo8(10)
 767 0314 50E0      		ldi r21,0
 768 0316 BE01      		movw r22,r28
 769 0318 6F5F      		subi r22,-1
 770 031a 7F4F      		sbci r23,-1
 771 031c 0E94 0000 		call itoa
 164:ssd1306_control_panel.c ****         lcd_draw_string(0, 3, "Y: ", buffer);
 773               	.LM95:
 774 0320 20E0      		ldi r18,lo8(buffer)
 775 0322 30E0      		ldi r19,hi8(buffer)
 776 0324 40E0      		ldi r20,lo8(.LC2)
 777 0326 50E0      		ldi r21,hi8(.LC2)
 778 0328 63E0      		ldi r22,lo8(3)
 779 032a 70E0      		ldi r23,0
 780 032c 80E0      		ldi r24,0
 781 032e 90E0      		ldi r25,0
 782 0330 0E94 0000 		call lcd_draw_string
 165:ssd1306_control_panel.c ****         lcd_draw_string(13, 3, valueIn, buffer);
 784               	.LM96:
 785 0334 20E0      		ldi r18,lo8(buffer)
 786 0336 30E0      		ldi r19,hi8(buffer)
 787 0338 AE01      		movw r20,r28
 788 033a 4F5F      		subi r20,-1
 789 033c 5F4F      		sbci r21,-1
 790 033e 63E0      		ldi r22,lo8(3)
 791 0340 70E0      		ldi r23,0
 792 0342 00C0      		rjmp .L23
 793               	.L22:
 794               	.LBE12:
 167:ssd1306_control_panel.c ****     else if(channel == 3){
 796               	.LM97:
 797 0344 8330      		cpi r24,lo8(3)
 798 0346 01F4      		brne .L19
 799               	.LBB13:
 168:ssd1306_control_panel.c ****         ADMUX |= ((1<<MUX1)|(1<<MUX0));                 // setup ADC Channel 3
 801               	.LM98:
 802 0348 8091 7C00 		lds r24,124
 803 034c 8360      		ori r24,lo8(3)
 804 034e 8093 7C00 		sts 124,r24
 172:ssd1306_control_panel.c ****         ADCSRA |= (1 << ADSC); // Start a new conversion, 
 806               	.LM99:
 807 0352 8091 7A00 		lds r24,122
 808 0356 8064      		ori r24,lo8(64)
 809 0358 8093 7A00 		sts 122,r24
 173:ssd1306_control_panel.c ****         adcVal = ADC;       // 10 bit reading
 811               	.LM100:
 812 035c 8091 7800 		lds r24,120
 813 0360 9091 7900 		lds r25,120+1
 174:ssd1306_control_panel.c ****         itoa(adcVal, valueIn, 10);
 815               	.LM101:
 816 0364 4AE0      		ldi r20,lo8(10)
 817 0366 50E0      		ldi r21,0
 818 0368 BE01      		movw r22,r28
 819 036a 6F5F      		subi r22,-1
 820 036c 7F4F      		sbci r23,-1
 821 036e 0E94 0000 		call itoa
 175:ssd1306_control_panel.c ****         lcd_draw_string(0, 4, "Z: ", buffer);
 823               	.LM102:
 824 0372 20E0      		ldi r18,lo8(buffer)
 825 0374 30E0      		ldi r19,hi8(buffer)
 826 0376 40E0      		ldi r20,lo8(.LC3)
 827 0378 50E0      		ldi r21,hi8(.LC3)
 828 037a 64E0      		ldi r22,lo8(4)
 829 037c 70E0      		ldi r23,0
 830 037e 80E0      		ldi r24,0
 831 0380 90E0      		ldi r25,0
 832 0382 0E94 0000 		call lcd_draw_string
 176:ssd1306_control_panel.c ****         lcd_draw_string(13, 4, valueIn, buffer);
 834               	.LM103:
 835 0386 20E0      		ldi r18,lo8(buffer)
 836 0388 30E0      		ldi r19,hi8(buffer)
 837 038a AE01      		movw r20,r28
 838 038c 4F5F      		subi r20,-1
 839 038e 5F4F      		sbci r21,-1
 840 0390 64E0      		ldi r22,lo8(4)
 841 0392 70E0      		ldi r23,0
 842               	.L23:
 843 0394 8DE0      		ldi r24,lo8(13)
 844 0396 90E0      		ldi r25,0
 845 0398 0E94 0000 		call lcd_draw_string
 846               	.L19:
 847               	/* epilogue start */
 848               	.LBE13:
 180:ssd1306_control_panel.c **** }
 850               	.LM104:
 851 039c 0F90      		pop __tmp_reg__
 852 039e 0F90      		pop __tmp_reg__
 853 03a0 0F90      		pop __tmp_reg__
 854 03a2 0F90      		pop __tmp_reg__
 855 03a4 DF91      		pop r29
 856 03a6 CF91      		pop r28
 857 03a8 0895      		ret
 871               	.Lscope8:
 873               		.stabd	78,0,0
 874               		.section	.text.startup,"ax",@progbits
 876               	.global	main
 878               	main:
 879               		.stabd	46,0,0
  91:ssd1306_control_panel.c **** {
 881               	.LM105:
 882               	.LFBB9:
 883               	/* prologue: function */
 884               	/* frame size = 0 */
 885               	/* stack size = 0 */
 886               	.L__stack_usage = 0
  94:ssd1306_control_panel.c ****     DDRB  = 0xff;                              // use all pins on port B for output 
 888               	.LM106:
 889 0000 CFEF      		ldi r28,lo8(-1)
 890 0002 C4B9      		out 0x4,r28
  95:ssd1306_control_panel.c ****     PORTB = 0x00;                              // (LED's low & off)
 892               	.LM107:
 893 0004 15B8      		out 0x5,__zero_reg__
  97:ssd1306_control_panel.c ****     i2c_init();                                // init I2C interface
 895               	.LM108:
 896 0006 0E94 0000 		call i2c_init
  99:ssd1306_control_panel.c ****     ret = i2c_start(DevSSD1306+I2C_WRITE);       // set device address and write mode
 898               	.LM109:
 899 000a 88E7      		ldi r24,lo8(120)
 900 000c 0E94 0000 		call i2c_start
 100:ssd1306_control_panel.c ****     if ( ret ) {
 902               	.LM110:
 903 0010 8823      		tst r24
 904 0012 01F0      		breq .L25
 102:ssd1306_control_panel.c ****         i2c_stop();
 906               	.LM111:
 907 0014 0E94 0000 		call i2c_stop
 103:ssd1306_control_panel.c ****         PORTB=0xff;                            // activate all 8 LED to show error */
 909               	.LM112:
 910 0018 C5B9      		out 0x5,r28
 911 001a 00C0      		rjmp .L26
 912               	.L25:
 913               	.LBB14:
 107:ssd1306_control_panel.c ****     setup_i2c();
 915               	.LM113:
 916 001c 0E94 0000 		call setup_i2c
 108:ssd1306_control_panel.c ****     setup_adc();
 918               	.LM114:
 919 0020 0E94 0000 		call setup_adc
 920               	.L26:
 921               	.LBE14:
 922               	.LBB15:
 120:ssd1306_control_panel.c ****         PORTB=0xFF;
 924               	.LM115:
 925 0024 CFEF      		ldi r28,lo8(-1)
 926               	.L28:
 111:ssd1306_control_panel.c ****         clearBuffer(buffer);
 928               	.LM116:
 929 0026 80E0      		ldi r24,lo8(buffer)
 930 0028 90E0      		ldi r25,hi8(buffer)
 931 002a 0E94 0000 		call clearBuffer
 114:ssd1306_control_panel.c ****         sample_adc_channel(1);
 933               	.LM117:
 934 002e 81E0      		ldi r24,lo8(1)
 935 0030 90E0      		ldi r25,0
 936 0032 0E94 0000 		call sample_adc_channel
 115:ssd1306_control_panel.c ****         sample_adc_channel(2);
 938               	.LM118:
 939 0036 82E0      		ldi r24,lo8(2)
 940 0038 90E0      		ldi r25,0
 941 003a 0E94 0000 		call sample_adc_channel
 116:ssd1306_control_panel.c ****         sample_adc_channel(3);
 943               	.LM119:
 944 003e 83E0      		ldi r24,lo8(3)
 945 0040 90E0      		ldi r25,0
 946 0042 0E94 0000 		call sample_adc_channel
 118:ssd1306_control_panel.c ****         PORTB=0x00;
 948               	.LM120:
 949 0046 15B8      		out 0x5,__zero_reg__
 119:ssd1306_control_panel.c ****         drawBuffer(0, 0, buffer);
 951               	.LM121:
 952 0048 40E0      		ldi r20,lo8(buffer)
 953 004a 50E0      		ldi r21,hi8(buffer)
 954 004c 60E0      		ldi r22,0
 955 004e 70E0      		ldi r23,0
 956 0050 80E0      		ldi r24,0
 957 0052 90E0      		ldi r25,0
 958 0054 0E94 0000 		call drawBuffer
 120:ssd1306_control_panel.c ****         PORTB=0xFF;
 960               	.LM122:
 961 0058 C5B9      		out 0x5,r28
 962               	.LBB16:
 963               	.LBB17:
 965               	.Ltext1:
   1:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 967               	.LM123:
 968 005a 2FEF      		ldi r18,lo8(799999)
 969 005c 84E3      		ldi r24,hi8(799999)
 970 005e 9CE0      		ldi r25,hlo8(799999)
 971 0060 2150      		1: subi r18,1
 972 0062 8040      		sbci r24,0
 973 0064 9040      		sbci r25,0
 974 0066 01F4      		brne 1b
 975 0068 00C0      		rjmp .
 976 006a 0000      		nop
 977 006c 00C0      		rjmp .L28
 978               	.LBE17:
 979               	.LBE16:
 980               	.LBE15:
 982               	.Lscope9:
 984               		.stabd	78,0,0
 985               	.global	Ascii_1
 986               		.data
 989               	Ascii_1:
 990 0000 00        		.byte	0
 991 0001 00        		.byte	0
 992 0002 00        		.byte	0
 993 0003 00        		.byte	0
 994 0004 00        		.byte	0
 995 0005 00        		.byte	0
 996 0006 00        		.byte	0
 997 0007 4F        		.byte	79
 998 0008 00        		.byte	0
 999 0009 00        		.byte	0
 1000 000a 00        		.byte	0
 1001 000b 07        		.byte	7
 1002 000c 00        		.byte	0
 1003 000d 07        		.byte	7
 1004 000e 00        		.byte	0
 1005 000f 14        		.byte	20
 1006 0010 7F        		.byte	127
 1007 0011 14        		.byte	20
 1008 0012 7F        		.byte	127
 1009 0013 14        		.byte	20
 1010 0014 24        		.byte	36
 1011 0015 2A        		.byte	42
 1012 0016 7F        		.byte	127
 1013 0017 2A        		.byte	42
 1014 0018 12        		.byte	18
 1015 0019 23        		.byte	35
 1016 001a 13        		.byte	19
 1017 001b 08        		.byte	8
 1018 001c 64        		.byte	100
 1019 001d 62        		.byte	98
 1020 001e 36        		.byte	54
 1021 001f 49        		.byte	73
 1022 0020 55        		.byte	85
 1023 0021 22        		.byte	34
 1024 0022 50        		.byte	80
 1025 0023 00        		.byte	0
 1026 0024 05        		.byte	5
 1027 0025 03        		.byte	3
 1028 0026 00        		.byte	0
 1029 0027 00        		.byte	0
 1030 0028 00        		.byte	0
 1031 0029 1C        		.byte	28
 1032 002a 22        		.byte	34
 1033 002b 41        		.byte	65
 1034 002c 00        		.byte	0
 1035 002d 00        		.byte	0
 1036 002e 41        		.byte	65
 1037 002f 22        		.byte	34
 1038 0030 1C        		.byte	28
 1039 0031 00        		.byte	0
 1040 0032 14        		.byte	20
 1041 0033 08        		.byte	8
 1042 0034 3E        		.byte	62
 1043 0035 08        		.byte	8
 1044 0036 14        		.byte	20
 1045 0037 08        		.byte	8
 1046 0038 08        		.byte	8
 1047 0039 3E        		.byte	62
 1048 003a 08        		.byte	8
 1049 003b 08        		.byte	8
 1050 003c 00        		.byte	0
 1051 003d 50        		.byte	80
 1052 003e 30        		.byte	48
 1053 003f 00        		.byte	0
 1054 0040 00        		.byte	0
 1055 0041 08        		.byte	8
 1056 0042 08        		.byte	8
 1057 0043 08        		.byte	8
 1058 0044 08        		.byte	8
 1059 0045 08        		.byte	8
 1060 0046 00        		.byte	0
 1061 0047 60        		.byte	96
 1062 0048 60        		.byte	96
 1063 0049 00        		.byte	0
 1064 004a 00        		.byte	0
 1065 004b 20        		.byte	32
 1066 004c 10        		.byte	16
 1067 004d 08        		.byte	8
 1068 004e 04        		.byte	4
 1069 004f 02        		.byte	2
 1070 0050 3E        		.byte	62
 1071 0051 51        		.byte	81
 1072 0052 49        		.byte	73
 1073 0053 45        		.byte	69
 1074 0054 3E        		.byte	62
 1075 0055 00        		.byte	0
 1076 0056 42        		.byte	66
 1077 0057 7F        		.byte	127
 1078 0058 40        		.byte	64
 1079 0059 00        		.byte	0
 1080 005a 42        		.byte	66
 1081 005b 61        		.byte	97
 1082 005c 51        		.byte	81
 1083 005d 49        		.byte	73
 1084 005e 46        		.byte	70
 1085 005f 21        		.byte	33
 1086 0060 41        		.byte	65
 1087 0061 45        		.byte	69
 1088 0062 4B        		.byte	75
 1089 0063 31        		.byte	49
 1090 0064 18        		.byte	24
 1091 0065 14        		.byte	20
 1092 0066 12        		.byte	18
 1093 0067 7F        		.byte	127
 1094 0068 10        		.byte	16
 1095 0069 27        		.byte	39
 1096 006a 45        		.byte	69
 1097 006b 45        		.byte	69
 1098 006c 45        		.byte	69
 1099 006d 39        		.byte	57
 1100 006e 3C        		.byte	60
 1101 006f 4A        		.byte	74
 1102 0070 49        		.byte	73
 1103 0071 49        		.byte	73
 1104 0072 30        		.byte	48
 1105 0073 01        		.byte	1
 1106 0074 71        		.byte	113
 1107 0075 09        		.byte	9
 1108 0076 05        		.byte	5
 1109 0077 03        		.byte	3
 1110 0078 36        		.byte	54
 1111 0079 49        		.byte	73
 1112 007a 49        		.byte	73
 1113 007b 49        		.byte	73
 1114 007c 36        		.byte	54
 1115 007d 06        		.byte	6
 1116 007e 49        		.byte	73
 1117 007f 49        		.byte	73
 1118 0080 29        		.byte	41
 1119 0081 1E        		.byte	30
 1120 0082 00        		.byte	0
 1121 0083 36        		.byte	54
 1122 0084 36        		.byte	54
 1123 0085 00        		.byte	0
 1124 0086 00        		.byte	0
 1125 0087 00        		.byte	0
 1126 0088 56        		.byte	86
 1127 0089 36        		.byte	54
 1128 008a 00        		.byte	0
 1129 008b 00        		.byte	0
 1130 008c 08        		.byte	8
 1131 008d 14        		.byte	20
 1132 008e 22        		.byte	34
 1133 008f 41        		.byte	65
 1134 0090 00        		.byte	0
 1135 0091 14        		.byte	20
 1136 0092 14        		.byte	20
 1137 0093 14        		.byte	20
 1138 0094 14        		.byte	20
 1139 0095 14        		.byte	20
 1140 0096 00        		.byte	0
 1141 0097 41        		.byte	65
 1142 0098 22        		.byte	34
 1143 0099 14        		.byte	20
 1144 009a 08        		.byte	8
 1145 009b 02        		.byte	2
 1146 009c 01        		.byte	1
 1147 009d 51        		.byte	81
 1148 009e 09        		.byte	9
 1149 009f 06        		.byte	6
 1150 00a0 32        		.byte	50
 1151 00a1 49        		.byte	73
 1152 00a2 79        		.byte	121
 1153 00a3 41        		.byte	65
 1154 00a4 3E        		.byte	62
 1155 00a5 7E        		.byte	126
 1156 00a6 11        		.byte	17
 1157 00a7 11        		.byte	17
 1158 00a8 11        		.byte	17
 1159 00a9 7E        		.byte	126
 1160 00aa 7F        		.byte	127
 1161 00ab 49        		.byte	73
 1162 00ac 49        		.byte	73
 1163 00ad 49        		.byte	73
 1164 00ae 36        		.byte	54
 1165 00af 3E        		.byte	62
 1166 00b0 41        		.byte	65
 1167 00b1 41        		.byte	65
 1168 00b2 41        		.byte	65
 1169 00b3 22        		.byte	34
 1170 00b4 7F        		.byte	127
 1171 00b5 41        		.byte	65
 1172 00b6 41        		.byte	65
 1173 00b7 22        		.byte	34
 1174 00b8 1C        		.byte	28
 1175 00b9 7F        		.byte	127
 1176 00ba 49        		.byte	73
 1177 00bb 49        		.byte	73
 1178 00bc 49        		.byte	73
 1179 00bd 41        		.byte	65
 1180 00be 7F        		.byte	127
 1181 00bf 09        		.byte	9
 1182 00c0 09        		.byte	9
 1183 00c1 09        		.byte	9
 1184 00c2 01        		.byte	1
 1185 00c3 3E        		.byte	62
 1186 00c4 41        		.byte	65
 1187 00c5 49        		.byte	73
 1188 00c6 49        		.byte	73
 1189 00c7 7A        		.byte	122
 1190 00c8 7F        		.byte	127
 1191 00c9 08        		.byte	8
 1192 00ca 08        		.byte	8
 1193 00cb 08        		.byte	8
 1194 00cc 7F        		.byte	127
 1195 00cd 00        		.byte	0
 1196 00ce 41        		.byte	65
 1197 00cf 7F        		.byte	127
 1198 00d0 41        		.byte	65
 1199 00d1 00        		.byte	0
 1200 00d2 20        		.byte	32
 1201 00d3 40        		.byte	64
 1202 00d4 41        		.byte	65
 1203 00d5 3F        		.byte	63
 1204 00d6 01        		.byte	1
 1205 00d7 7F        		.byte	127
 1206 00d8 08        		.byte	8
 1207 00d9 14        		.byte	20
 1208 00da 22        		.byte	34
 1209 00db 41        		.byte	65
 1210 00dc 7F        		.byte	127
 1211 00dd 40        		.byte	64
 1212 00de 40        		.byte	64
 1213 00df 40        		.byte	64
 1214 00e0 40        		.byte	64
 1215 00e1 7F        		.byte	127
 1216 00e2 02        		.byte	2
 1217 00e3 0C        		.byte	12
 1218 00e4 02        		.byte	2
 1219 00e5 7F        		.byte	127
 1220 00e6 7F        		.byte	127
 1221 00e7 04        		.byte	4
 1222 00e8 08        		.byte	8
 1223 00e9 10        		.byte	16
 1224 00ea 7F        		.byte	127
 1225 00eb 3E        		.byte	62
 1226 00ec 41        		.byte	65
 1227 00ed 41        		.byte	65
 1228 00ee 41        		.byte	65
 1229 00ef 3E        		.byte	62
 1230 00f0 7F        		.byte	127
 1231 00f1 09        		.byte	9
 1232 00f2 09        		.byte	9
 1233 00f3 09        		.byte	9
 1234 00f4 06        		.byte	6
 1235 00f5 3E        		.byte	62
 1236 00f6 41        		.byte	65
 1237 00f7 51        		.byte	81
 1238 00f8 21        		.byte	33
 1239 00f9 5E        		.byte	94
 1240 00fa 7F        		.byte	127
 1241 00fb 09        		.byte	9
 1242 00fc 19        		.byte	25
 1243 00fd 29        		.byte	41
 1244 00fe 46        		.byte	70
 1245 00ff 46        		.byte	70
 1246 0100 49        		.byte	73
 1247 0101 49        		.byte	73
 1248 0102 49        		.byte	73
 1249 0103 31        		.byte	49
 1250 0104 01        		.byte	1
 1251 0105 01        		.byte	1
 1252 0106 7F        		.byte	127
 1253 0107 01        		.byte	1
 1254 0108 01        		.byte	1
 1255 0109 3F        		.byte	63
 1256 010a 40        		.byte	64
 1257 010b 40        		.byte	64
 1258 010c 40        		.byte	64
 1259 010d 3F        		.byte	63
 1260 010e 1F        		.byte	31
 1261 010f 20        		.byte	32
 1262 0110 40        		.byte	64
 1263 0111 20        		.byte	32
 1264 0112 1F        		.byte	31
 1265 0113 3F        		.byte	63
 1266 0114 40        		.byte	64
 1267 0115 38        		.byte	56
 1268 0116 40        		.byte	64
 1269 0117 3F        		.byte	63
 1270 0118 63        		.byte	99
 1271 0119 14        		.byte	20
 1272 011a 08        		.byte	8
 1273 011b 14        		.byte	20
 1274 011c 63        		.byte	99
 1275 011d 07        		.byte	7
 1276 011e 08        		.byte	8
 1277 011f 70        		.byte	112
 1278 0120 08        		.byte	8
 1279 0121 07        		.byte	7
 1280 0122 61        		.byte	97
 1281 0123 51        		.byte	81
 1282 0124 49        		.byte	73
 1283 0125 45        		.byte	69
 1284 0126 43        		.byte	67
 1285 0127 00        		.byte	0
 1286 0128 7F        		.byte	127
 1287 0129 41        		.byte	65
 1288 012a 41        		.byte	65
 1289 012b 00        		.byte	0
 1290 012c 02        		.byte	2
 1291 012d 04        		.byte	4
 1292 012e 08        		.byte	8
 1293 012f 10        		.byte	16
 1294 0130 20        		.byte	32
 1295 0131 00        		.byte	0
 1296 0132 41        		.byte	65
 1297 0133 41        		.byte	65
 1298 0134 7F        		.byte	127
 1299 0135 00        		.byte	0
 1300 0136 04        		.byte	4
 1301 0137 02        		.byte	2
 1302 0138 01        		.byte	1
 1303 0139 02        		.byte	2
 1304 013a 04        		.byte	4
 1305 013b 40        		.byte	64
 1306 013c 40        		.byte	64
 1307 013d 40        		.byte	64
 1308 013e 40        		.byte	64
 1309 013f 40        		.byte	64
 1310 0140 01        		.byte	1
 1311 0141 02        		.byte	2
 1312 0142 04        		.byte	4
 1313 0143 00        		.byte	0
 1314 0144 00        		.byte	0
 1315 0145 20        		.byte	32
 1316 0146 54        		.byte	84
 1317 0147 54        		.byte	84
 1318 0148 54        		.byte	84
 1319 0149 78        		.byte	120
 1320 014a 7F        		.byte	127
 1321 014b 48        		.byte	72
 1322 014c 44        		.byte	68
 1323 014d 44        		.byte	68
 1324 014e 38        		.byte	56
 1325 014f 38        		.byte	56
 1326 0150 44        		.byte	68
 1327 0151 44        		.byte	68
 1328 0152 44        		.byte	68
 1329 0153 20        		.byte	32
 1330 0154 38        		.byte	56
 1331 0155 44        		.byte	68
 1332 0156 44        		.byte	68
 1333 0157 48        		.byte	72
 1334 0158 7F        		.byte	127
 1335 0159 38        		.byte	56
 1336 015a 54        		.byte	84
 1337 015b 54        		.byte	84
 1338 015c 54        		.byte	84
 1339 015d 18        		.byte	24
 1340 015e 08        		.byte	8
 1341 015f 7E        		.byte	126
 1342 0160 09        		.byte	9
 1343 0161 01        		.byte	1
 1344 0162 02        		.byte	2
 1345 0163 06        		.byte	6
 1346 0164 49        		.byte	73
 1347 0165 49        		.byte	73
 1348 0166 49        		.byte	73
 1349 0167 3F        		.byte	63
 1350 0168 7F        		.byte	127
 1351 0169 08        		.byte	8
 1352 016a 04        		.byte	4
 1353 016b 04        		.byte	4
 1354 016c 78        		.byte	120
 1355 016d 00        		.byte	0
 1356 016e 44        		.byte	68
 1357 016f 7D        		.byte	125
 1358 0170 40        		.byte	64
 1359 0171 00        		.byte	0
 1360 0172 20        		.byte	32
 1361 0173 40        		.byte	64
 1362 0174 44        		.byte	68
 1363 0175 3D        		.byte	61
 1364 0176 00        		.byte	0
 1365 0177 7F        		.byte	127
 1366 0178 10        		.byte	16
 1367 0179 28        		.byte	40
 1368 017a 44        		.byte	68
 1369 017b 00        		.byte	0
 1370 017c 00        		.byte	0
 1371 017d 41        		.byte	65
 1372 017e 7F        		.byte	127
 1373 017f 40        		.byte	64
 1374 0180 00        		.byte	0
 1375 0181 7C        		.byte	124
 1376 0182 04        		.byte	4
 1377 0183 18        		.byte	24
 1378 0184 04        		.byte	4
 1379 0185 7C        		.byte	124
 1380 0186 7C        		.byte	124
 1381 0187 08        		.byte	8
 1382 0188 04        		.byte	4
 1383 0189 04        		.byte	4
 1384 018a 78        		.byte	120
 1385 018b 38        		.byte	56
 1386 018c 44        		.byte	68
 1387 018d 44        		.byte	68
 1388 018e 44        		.byte	68
 1389 018f 38        		.byte	56
 1390 0190 7C        		.byte	124
 1391 0191 14        		.byte	20
 1392 0192 14        		.byte	20
 1393 0193 14        		.byte	20
 1394 0194 08        		.byte	8
 1395 0195 08        		.byte	8
 1396 0196 14        		.byte	20
 1397 0197 14        		.byte	20
 1398 0198 18        		.byte	24
 1399 0199 7C        		.byte	124
 1400 019a 7C        		.byte	124
 1401 019b 08        		.byte	8
 1402 019c 04        		.byte	4
 1403 019d 04        		.byte	4
 1404 019e 08        		.byte	8
 1405 019f 48        		.byte	72
 1406 01a0 54        		.byte	84
 1407 01a1 54        		.byte	84
 1408 01a2 54        		.byte	84
 1409 01a3 20        		.byte	32
 1410 01a4 04        		.byte	4
 1411 01a5 3F        		.byte	63
 1412 01a6 44        		.byte	68
 1413 01a7 40        		.byte	64
 1414 01a8 20        		.byte	32
 1415 01a9 3C        		.byte	60
 1416 01aa 40        		.byte	64
 1417 01ab 40        		.byte	64
 1418 01ac 20        		.byte	32
 1419 01ad 7C        		.byte	124
 1420 01ae 1C        		.byte	28
 1421 01af 20        		.byte	32
 1422 01b0 40        		.byte	64
 1423 01b1 20        		.byte	32
 1424 01b2 1C        		.byte	28
 1425 01b3 3C        		.byte	60
 1426 01b4 40        		.byte	64
 1427 01b5 30        		.byte	48
 1428 01b6 40        		.byte	64
 1429 01b7 3C        		.byte	60
 1430 01b8 44        		.byte	68
 1431 01b9 28        		.byte	40
 1432 01ba 10        		.byte	16
 1433 01bb 28        		.byte	40
 1434 01bc 44        		.byte	68
 1435 01bd 0C        		.byte	12
 1436 01be 50        		.byte	80
 1437 01bf 50        		.byte	80
 1438 01c0 50        		.byte	80
 1439 01c1 3C        		.byte	60
 1440 01c2 44        		.byte	68
 1441 01c3 64        		.byte	100
 1442 01c4 54        		.byte	84
 1443 01c5 4C        		.byte	76
 1444 01c6 44        		.byte	68
 1445 01c7 00        		.byte	0
 1446 01c8 08        		.byte	8
 1447 01c9 36        		.byte	54
 1448 01ca 41        		.byte	65
 1449 01cb 00        		.byte	0
 1450 01cc 00        		.byte	0
 1451 01cd 00        		.byte	0
 1452 01ce 7F        		.byte	127
 1453 01cf 00        		.byte	0
 1454 01d0 00        		.byte	0
 1455 01d1 00        		.byte	0
 1456 01d2 41        		.byte	65
 1457 01d3 36        		.byte	54
 1458 01d4 08        		.byte	8
 1459 01d5 00        		.byte	0
 1460 01d6 02        		.byte	2
 1461 01d7 01        		.byte	1
 1462 01d8 02        		.byte	2
 1463 01d9 04        		.byte	4
 1464 01da 02        		.byte	2
 1465 01db 08        		.byte	8
 1466 01dc 0C        		.byte	12
 1467 01dd 0E        		.byte	14
 1468 01de 0C        		.byte	12
 1469 01df 08        		.byte	8
 1470 01e0 08        		.byte	8
 1471 01e1 18        		.byte	24
 1472 01e2 38        		.byte	56
 1473 01e3 18        		.byte	24
 1474 01e4 08        		.byte	8
 1477               	buffer:
 1478 01e5 AA        		.byte	-86
 1479 01e6 55        		.byte	85
 1480 01e7 AA        		.byte	-86
 1481 01e8 55        		.byte	85
 1482 01e9 AA        		.byte	-86
 1483 01ea 55        		.byte	85
 1484 01eb AA        		.byte	-86
 1485 01ec 55        		.byte	85
 1486 01ed AA        		.byte	-86
 1487 01ee 55        		.byte	85
 1488 01ef AA        		.byte	-86
 1489 01f0 55        		.byte	85
 1490 01f1 AA        		.byte	-86
 1491 01f2 55        		.byte	85
 1492 01f3 AA        		.byte	-86
 1493 01f4 55        		.byte	85
 1494 01f5 AA        		.byte	-86
 1495 01f6 55        		.byte	85
 1496 01f7 AA        		.byte	-86
 1497 01f8 55        		.byte	85
 1498 01f9 AA        		.byte	-86
 1499 01fa 55        		.byte	85
 1500 01fb AA        		.byte	-86
 1501 01fc 55        		.byte	85
 1502 01fd AA        		.byte	-86
 1503 01fe 55        		.byte	85
 1504 01ff AA        		.byte	-86
 1505 0200 55        		.byte	85
 1506 0201 AA        		.byte	-86
 1507 0202 55        		.byte	85
 1508 0203 AA        		.byte	-86
 1509 0204 55        		.byte	85
 1510 0205 AA        		.byte	-86
 1511 0206 55        		.byte	85
 1512 0207 AA        		.byte	-86
 1513 0208 55        		.byte	85
 1514 0209 AA        		.byte	-86
 1515 020a 55        		.byte	85
 1516 020b AA        		.byte	-86
 1517 020c 55        		.byte	85
 1518 020d AA        		.byte	-86
 1519 020e 55        		.byte	85
 1520 020f AA        		.byte	-86
 1521 0210 55        		.byte	85
 1522 0211 AA        		.byte	-86
 1523 0212 55        		.byte	85
 1524 0213 AA        		.byte	-86
 1525 0214 55        		.byte	85
 1526 0215 AA        		.byte	-86
 1527 0216 55        		.byte	85
 1528 0217 AA        		.byte	-86
 1529 0218 55        		.byte	85
 1530 0219 AA        		.byte	-86
 1531 021a 55        		.byte	85
 1532 021b AA        		.byte	-86
 1533 021c 55        		.byte	85
 1534 021d AA        		.byte	-86
 1535 021e 55        		.byte	85
 1536 021f AA        		.byte	-86
 1537 0220 55        		.byte	85
 1538 0221 AA        		.byte	-86
 1539 0222 55        		.byte	85
 1540 0223 AA        		.byte	-86
 1541 0224 55        		.byte	85
 1542 0225 AA        		.byte	-86
 1543 0226 55        		.byte	85
 1544 0227 AA        		.byte	-86
 1545 0228 55        		.byte	85
 1546 0229 AA        		.byte	-86
 1547 022a 55        		.byte	85
 1548 022b AA        		.byte	-86
 1549 022c 55        		.byte	85
 1550 022d AA        		.byte	-86
 1551 022e 55        		.byte	85
 1552 022f AA        		.byte	-86
 1553 0230 55        		.byte	85
 1554 0231 AA        		.byte	-86
 1555 0232 55        		.byte	85
 1556 0233 AA        		.byte	-86
 1557 0234 55        		.byte	85
 1558 0235 AA        		.byte	-86
 1559 0236 55        		.byte	85
 1560 0237 AA        		.byte	-86
 1561 0238 55        		.byte	85
 1562 0239 AA        		.byte	-86
 1563 023a 55        		.byte	85
 1564 023b AA        		.byte	-86
 1565 023c 55        		.byte	85
 1566 023d AA        		.byte	-86
 1567 023e 55        		.byte	85
 1568 023f AA        		.byte	-86
 1569 0240 55        		.byte	85
 1570 0241 AA        		.byte	-86
 1571 0242 55        		.byte	85
 1572 0243 AA        		.byte	-86
 1573 0244 55        		.byte	85
 1574 0245 AA        		.byte	-86
 1575 0246 55        		.byte	85
 1576 0247 AA        		.byte	-86
 1577 0248 55        		.byte	85
 1578 0249 AA        		.byte	-86
 1579 024a 55        		.byte	85
 1580 024b AA        		.byte	-86
 1581 024c 55        		.byte	85
 1582 024d AA        		.byte	-86
 1583 024e 55        		.byte	85
 1584 024f AA        		.byte	-86
 1585 0250 55        		.byte	85
 1586 0251 AA        		.byte	-86
 1587 0252 55        		.byte	85
 1588 0253 AA        		.byte	-86
 1589 0254 55        		.byte	85
 1590 0255 AA        		.byte	-86
 1591 0256 55        		.byte	85
 1592 0257 AA        		.byte	-86
 1593 0258 55        		.byte	85
 1594 0259 AA        		.byte	-86
 1595 025a 55        		.byte	85
 1596 025b AA        		.byte	-86
 1597 025c 55        		.byte	85
 1598 025d AA        		.byte	-86
 1599 025e 55        		.byte	85
 1600 025f AA        		.byte	-86
 1601 0260 55        		.byte	85
 1602 0261 AA        		.byte	-86
 1603 0262 55        		.byte	85
 1604 0263 AA        		.byte	-86
 1605 0264 55        		.byte	85
 1606 0265 AA        		.byte	-86
 1607 0266 55        		.byte	85
 1608 0267 AA        		.byte	-86
 1609 0268 55        		.byte	85
 1610 0269 AA        		.byte	-86
 1611 026a 55        		.byte	85
 1612 026b AA        		.byte	-86
 1613 026c 55        		.byte	85
 1614 026d AA        		.byte	-86
 1615 026e 55        		.byte	85
 1616 026f AA        		.byte	-86
 1617 0270 55        		.byte	85
 1618 0271 AA        		.byte	-86
 1619 0272 55        		.byte	85
 1620 0273 AA        		.byte	-86
 1621 0274 55        		.byte	85
 1622 0275 AA        		.byte	-86
 1623 0276 55        		.byte	85
 1624 0277 AA        		.byte	-86
 1625 0278 55        		.byte	85
 1626 0279 AA        		.byte	-86
 1627 027a 55        		.byte	85
 1628 027b AA        		.byte	-86
 1629 027c 55        		.byte	85
 1630 027d AA        		.byte	-86
 1631 027e 55        		.byte	85
 1632 027f AA        		.byte	-86
 1633 0280 55        		.byte	85
 1634 0281 AA        		.byte	-86
 1635 0282 55        		.byte	85
 1636 0283 AA        		.byte	-86
 1637 0284 55        		.byte	85
 1638 0285 AA        		.byte	-86
 1639 0286 55        		.byte	85
 1640 0287 AA        		.byte	-86
 1641 0288 55        		.byte	85
 1642 0289 AA        		.byte	-86
 1643 028a 55        		.byte	85
 1644 028b AA        		.byte	-86
 1645 028c 55        		.byte	85
 1646 028d AA        		.byte	-86
 1647 028e 55        		.byte	85
 1648 028f AA        		.byte	-86
 1649 0290 55        		.byte	85
 1650 0291 AA        		.byte	-86
 1651 0292 55        		.byte	85
 1652 0293 AA        		.byte	-86
 1653 0294 55        		.byte	85
 1654 0295 AA        		.byte	-86
 1655 0296 55        		.byte	85
 1656 0297 AA        		.byte	-86
 1657 0298 55        		.byte	85
 1658 0299 AA        		.byte	-86
 1659 029a 55        		.byte	85
 1660 029b AA        		.byte	-86
 1661 029c 55        		.byte	85
 1662 029d AA        		.byte	-86
 1663 029e 55        		.byte	85
 1664 029f AA        		.byte	-86
 1665 02a0 55        		.byte	85
 1666 02a1 AA        		.byte	-86
 1667 02a2 55        		.byte	85
 1668 02a3 AA        		.byte	-86
 1669 02a4 55        		.byte	85
 1670 02a5 AA        		.byte	-86
 1671 02a6 55        		.byte	85
 1672 02a7 AA        		.byte	-86
 1673 02a8 55        		.byte	85
 1674 02a9 AA        		.byte	-86
 1675 02aa 55        		.byte	85
 1676 02ab AA        		.byte	-86
 1677 02ac 55        		.byte	85
 1678 02ad AA        		.byte	-86
 1679 02ae 55        		.byte	85
 1680 02af AA        		.byte	-86
 1681 02b0 55        		.byte	85
 1682 02b1 AA        		.byte	-86
 1683 02b2 55        		.byte	85
 1684 02b3 AA        		.byte	-86
 1685 02b4 55        		.byte	85
 1686 02b5 AA        		.byte	-86
 1687 02b6 55        		.byte	85
 1688 02b7 AA        		.byte	-86
 1689 02b8 55        		.byte	85
 1690 02b9 AA        		.byte	-86
 1691 02ba 55        		.byte	85
 1692 02bb AA        		.byte	-86
 1693 02bc 55        		.byte	85
 1694 02bd AA        		.byte	-86
 1695 02be 55        		.byte	85
 1696 02bf AA        		.byte	-86
 1697 02c0 55        		.byte	85
 1698 02c1 AA        		.byte	-86
 1699 02c2 55        		.byte	85
 1700 02c3 AA        		.byte	-86
 1701 02c4 55        		.byte	85
 1702 02c5 AA        		.byte	-86
 1703 02c6 55        		.byte	85
 1704 02c7 AA        		.byte	-86
 1705 02c8 55        		.byte	85
 1706 02c9 AA        		.byte	-86
 1707 02ca 55        		.byte	85
 1708 02cb AA        		.byte	-86
 1709 02cc 55        		.byte	85
 1710 02cd AA        		.byte	-86
 1711 02ce 55        		.byte	85
 1712 02cf AA        		.byte	-86
 1713 02d0 55        		.byte	85
 1714 02d1 AA        		.byte	-86
 1715 02d2 55        		.byte	85
 1716 02d3 AA        		.byte	-86
 1717 02d4 55        		.byte	85
 1718 02d5 AA        		.byte	-86
 1719 02d6 55        		.byte	85
 1720 02d7 AA        		.byte	-86
 1721 02d8 55        		.byte	85
 1722 02d9 AA        		.byte	-86
 1723 02da 55        		.byte	85
 1724 02db AA        		.byte	-86
 1725 02dc 55        		.byte	85
 1726 02dd AA        		.byte	-86
 1727 02de 55        		.byte	85
 1728 02df AA        		.byte	-86
 1729 02e0 55        		.byte	85
 1730 02e1 AA        		.byte	-86
 1731 02e2 55        		.byte	85
 1732 02e3 AA        		.byte	-86
 1733 02e4 55        		.byte	85
 1734 02e5 AA        		.byte	-86
 1735 02e6 55        		.byte	85
 1736 02e7 AA        		.byte	-86
 1737 02e8 55        		.byte	85
 1738 02e9 AA        		.byte	-86
 1739 02ea 55        		.byte	85
 1740 02eb AA        		.byte	-86
 1741 02ec 55        		.byte	85
 1742 02ed AA        		.byte	-86
 1743 02ee 55        		.byte	85
 1744 02ef AA        		.byte	-86
 1745 02f0 55        		.byte	85
 1746 02f1 AA        		.byte	-86
 1747 02f2 55        		.byte	85
 1748 02f3 AA        		.byte	-86
 1749 02f4 55        		.byte	85
 1750 02f5 AA        		.byte	-86
 1751 02f6 55        		.byte	85
 1752 02f7 AA        		.byte	-86
 1753 02f8 55        		.byte	85
 1754 02f9 AA        		.byte	-86
 1755 02fa 55        		.byte	85
 1756 02fb AA        		.byte	-86
 1757 02fc 55        		.byte	85
 1758 02fd AA        		.byte	-86
 1759 02fe 55        		.byte	85
 1760 02ff AA        		.byte	-86
 1761 0300 55        		.byte	85
 1762 0301 AA        		.byte	-86
 1763 0302 55        		.byte	85
 1764 0303 AA        		.byte	-86
 1765 0304 55        		.byte	85
 1766 0305 AA        		.byte	-86
 1767 0306 55        		.byte	85
 1768 0307 AA        		.byte	-86
 1769 0308 55        		.byte	85
 1770 0309 AA        		.byte	-86
 1771 030a 55        		.byte	85
 1772 030b AA        		.byte	-86
 1773 030c 55        		.byte	85
 1774 030d AA        		.byte	-86
 1775 030e 55        		.byte	85
 1776 030f AA        		.byte	-86
 1777 0310 55        		.byte	85
 1778 0311 AA        		.byte	-86
 1779 0312 55        		.byte	85
 1780 0313 AA        		.byte	-86
 1781 0314 55        		.byte	85
 1782 0315 AA        		.byte	-86
 1783 0316 55        		.byte	85
 1784 0317 AA        		.byte	-86
 1785 0318 55        		.byte	85
 1786 0319 AA        		.byte	-86
 1787 031a 55        		.byte	85
 1788 031b AA        		.byte	-86
 1789 031c 55        		.byte	85
 1790 031d AA        		.byte	-86
 1791 031e 55        		.byte	85
 1792 031f AA        		.byte	-86
 1793 0320 55        		.byte	85
 1794 0321 AA        		.byte	-86
 1795 0322 55        		.byte	85
 1796 0323 AA        		.byte	-86
 1797 0324 55        		.byte	85
 1798 0325 AA        		.byte	-86
 1799 0326 55        		.byte	85
 1800 0327 AA        		.byte	-86
 1801 0328 55        		.byte	85
 1802 0329 AA        		.byte	-86
 1803 032a 55        		.byte	85
 1804 032b AA        		.byte	-86
 1805 032c 55        		.byte	85
 1806 032d AA        		.byte	-86
 1807 032e 55        		.byte	85
 1808 032f AA        		.byte	-86
 1809 0330 55        		.byte	85
 1810 0331 AA        		.byte	-86
 1811 0332 55        		.byte	85
 1812 0333 AA        		.byte	-86
 1813 0334 55        		.byte	85
 1814 0335 AA        		.byte	-86
 1815 0336 55        		.byte	85
 1816 0337 AA        		.byte	-86
 1817 0338 55        		.byte	85
 1818 0339 AA        		.byte	-86
 1819 033a 55        		.byte	85
 1820 033b AA        		.byte	-86
 1821 033c 55        		.byte	85
 1822 033d AA        		.byte	-86
 1823 033e 55        		.byte	85
 1824 033f AA        		.byte	-86
 1825 0340 55        		.byte	85
 1826 0341 AA        		.byte	-86
 1827 0342 55        		.byte	85
 1828 0343 AA        		.byte	-86
 1829 0344 55        		.byte	85
 1830 0345 AA        		.byte	-86
 1831 0346 55        		.byte	85
 1832 0347 AA        		.byte	-86
 1833 0348 55        		.byte	85
 1834 0349 AA        		.byte	-86
 1835 034a 55        		.byte	85
 1836 034b AA        		.byte	-86
 1837 034c 55        		.byte	85
 1838 034d AA        		.byte	-86
 1839 034e 55        		.byte	85
 1840 034f AA        		.byte	-86
 1841 0350 55        		.byte	85
 1842 0351 AA        		.byte	-86
 1843 0352 55        		.byte	85
 1844 0353 AA        		.byte	-86
 1845 0354 55        		.byte	85
 1846 0355 AA        		.byte	-86
 1847 0356 55        		.byte	85
 1848 0357 AA        		.byte	-86
 1849 0358 55        		.byte	85
 1850 0359 AA        		.byte	-86
 1851 035a 55        		.byte	85
 1852 035b AA        		.byte	-86
 1853 035c 55        		.byte	85
 1854 035d AA        		.byte	-86
 1855 035e 55        		.byte	85
 1856 035f AA        		.byte	-86
 1857 0360 55        		.byte	85
 1858 0361 AA        		.byte	-86
 1859 0362 55        		.byte	85
 1860 0363 AA        		.byte	-86
 1861 0364 55        		.byte	85
 1862 0365 AA        		.byte	-86
 1863 0366 55        		.byte	85
 1864 0367 AA        		.byte	-86
 1865 0368 55        		.byte	85
 1866 0369 AA        		.byte	-86
 1867 036a 55        		.byte	85
 1868 036b AA        		.byte	-86
 1869 036c 55        		.byte	85
 1870 036d AA        		.byte	-86
 1871 036e 55        		.byte	85
 1872 036f AA        		.byte	-86
 1873 0370 55        		.byte	85
 1874 0371 AA        		.byte	-86
 1875 0372 55        		.byte	85
 1876 0373 AA        		.byte	-86
 1877 0374 55        		.byte	85
 1878 0375 AA        		.byte	-86
 1879 0376 55        		.byte	85
 1880 0377 AA        		.byte	-86
 1881 0378 55        		.byte	85
 1882 0379 AA        		.byte	-86
 1883 037a 55        		.byte	85
 1884 037b AA        		.byte	-86
 1885 037c 55        		.byte	85
 1886 037d AA        		.byte	-86
 1887 037e 55        		.byte	85
 1888 037f AA        		.byte	-86
 1889 0380 55        		.byte	85
 1890 0381 AA        		.byte	-86
 1891 0382 55        		.byte	85
 1892 0383 AA        		.byte	-86
 1893 0384 55        		.byte	85
 1894 0385 AA        		.byte	-86
 1895 0386 55        		.byte	85
 1896 0387 AA        		.byte	-86
 1897 0388 55        		.byte	85
 1898 0389 AA        		.byte	-86
 1899 038a 55        		.byte	85
 1900 038b AA        		.byte	-86
 1901 038c 55        		.byte	85
 1902 038d AA        		.byte	-86
 1903 038e 55        		.byte	85
 1904 038f AA        		.byte	-86
 1905 0390 55        		.byte	85
 1906 0391 AA        		.byte	-86
 1907 0392 55        		.byte	85
 1908 0393 AA        		.byte	-86
 1909 0394 55        		.byte	85
 1910 0395 AA        		.byte	-86
 1911 0396 55        		.byte	85
 1912 0397 AA        		.byte	-86
 1913 0398 55        		.byte	85
 1914 0399 AA        		.byte	-86
 1915 039a 55        		.byte	85
 1916 039b AA        		.byte	-86
 1917 039c 55        		.byte	85
 1918 039d AA        		.byte	-86
 1919 039e 55        		.byte	85
 1920 039f AA        		.byte	-86
 1921 03a0 55        		.byte	85
 1922 03a1 AA        		.byte	-86
 1923 03a2 55        		.byte	85
 1924 03a3 AA        		.byte	-86
 1925 03a4 55        		.byte	85
 1926 03a5 AA        		.byte	-86
 1927 03a6 55        		.byte	85
 1928 03a7 AA        		.byte	-86
 1929 03a8 55        		.byte	85
 1930 03a9 AA        		.byte	-86
 1931 03aa 55        		.byte	85
 1932 03ab AA        		.byte	-86
 1933 03ac 55        		.byte	85
 1934 03ad AA        		.byte	-86
 1935 03ae 55        		.byte	85
 1936 03af AA        		.byte	-86
 1937 03b0 55        		.byte	85
 1938 03b1 AA        		.byte	-86
 1939 03b2 55        		.byte	85
 1940 03b3 AA        		.byte	-86
 1941 03b4 55        		.byte	85
 1942 03b5 AA        		.byte	-86
 1943 03b6 55        		.byte	85
 1944 03b7 AA        		.byte	-86
 1945 03b8 55        		.byte	85
 1946 03b9 AA        		.byte	-86
 1947 03ba 55        		.byte	85
 1948 03bb AA        		.byte	-86
 1949 03bc 55        		.byte	85
 1950 03bd AA        		.byte	-86
 1951 03be 55        		.byte	85
 1952 03bf AA        		.byte	-86
 1953 03c0 55        		.byte	85
 1954 03c1 AA        		.byte	-86
 1955 03c2 55        		.byte	85
 1956 03c3 AA        		.byte	-86
 1957 03c4 55        		.byte	85
 1958 03c5 AA        		.byte	-86
 1959 03c6 55        		.byte	85
 1960 03c7 AA        		.byte	-86
 1961 03c8 55        		.byte	85
 1962 03c9 AA        		.byte	-86
 1963 03ca 55        		.byte	85
 1964 03cb AA        		.byte	-86
 1965 03cc 55        		.byte	85
 1966 03cd AA        		.byte	-86
 1967 03ce 55        		.byte	85
 1968 03cf AA        		.byte	-86
 1969 03d0 55        		.byte	85
 1970 03d1 AA        		.byte	-86
 1971 03d2 55        		.byte	85
 1972 03d3 AA        		.byte	-86
 1973 03d4 55        		.byte	85
 1974 03d5 AA        		.byte	-86
 1975 03d6 55        		.byte	85
 1976 03d7 AA        		.byte	-86
 1977 03d8 55        		.byte	85
 1978 03d9 AA        		.byte	-86
 1979 03da 55        		.byte	85
 1980 03db AA        		.byte	-86
 1981 03dc 55        		.byte	85
 1982 03dd AA        		.byte	-86
 1983 03de 55        		.byte	85
 1984 03df AA        		.byte	-86
 1985 03e0 55        		.byte	85
 1986 03e1 AA        		.byte	-86
 1987 03e2 55        		.byte	85
 1988 03e3 AA        		.byte	-86
 1989 03e4 55        		.byte	85
 1990 03e5 AA        		.byte	-86
 1991 03e6 55        		.byte	85
 1992 03e7 AA        		.byte	-86
 1993 03e8 55        		.byte	85
 1994 03e9 AA        		.byte	-86
 1995 03ea 55        		.byte	85
 1996 03eb AA        		.byte	-86
 1997 03ec 55        		.byte	85
 1998 03ed AA        		.byte	-86
 1999 03ee 55        		.byte	85
 2000 03ef AA        		.byte	-86
 2001 03f0 55        		.byte	85
 2002 03f1 AA        		.byte	-86
 2003 03f2 55        		.byte	85
 2004 03f3 AA        		.byte	-86
 2005 03f4 55        		.byte	85
 2006 03f5 AA        		.byte	-86
 2007 03f6 55        		.byte	85
 2008 03f7 AA        		.byte	-86
 2009 03f8 55        		.byte	85
 2010 03f9 AA        		.byte	-86
 2011 03fa 55        		.byte	85
 2012 03fb AA        		.byte	-86
 2013 03fc 55        		.byte	85
 2014 03fd AA        		.byte	-86
 2015 03fe 55        		.byte	85
 2016 03ff AA        		.byte	-86
 2017 0400 55        		.byte	85
 2018 0401 AA        		.byte	-86
 2019 0402 55        		.byte	85
 2020 0403 AA        		.byte	-86
 2021 0404 55        		.byte	85
 2022 0405 AA        		.byte	-86
 2023 0406 55        		.byte	85
 2024 0407 AA        		.byte	-86
 2025 0408 55        		.byte	85
 2026 0409 AA        		.byte	-86
 2027 040a 55        		.byte	85
 2028 040b AA        		.byte	-86
 2029 040c 55        		.byte	85
 2030 040d AA        		.byte	-86
 2031 040e 55        		.byte	85
 2032 040f AA        		.byte	-86
 2033 0410 55        		.byte	85
 2034 0411 AA        		.byte	-86
 2035 0412 55        		.byte	85
 2036 0413 AA        		.byte	-86
 2037 0414 55        		.byte	85
 2038 0415 AA        		.byte	-86
 2039 0416 55        		.byte	85
 2040 0417 AA        		.byte	-86
 2041 0418 55        		.byte	85
 2042 0419 AA        		.byte	-86
 2043 041a 55        		.byte	85
 2044 041b AA        		.byte	-86
 2045 041c 55        		.byte	85
 2046 041d AA        		.byte	-86
 2047 041e 55        		.byte	85
 2048 041f AA        		.byte	-86
 2049 0420 55        		.byte	85
 2050 0421 AA        		.byte	-86
 2051 0422 55        		.byte	85
 2052 0423 AA        		.byte	-86
 2053 0424 55        		.byte	85
 2054 0425 AA        		.byte	-86
 2055 0426 55        		.byte	85
 2056 0427 AA        		.byte	-86
 2057 0428 55        		.byte	85
 2058 0429 AA        		.byte	-86
 2059 042a 55        		.byte	85
 2060 042b AA        		.byte	-86
 2061 042c 55        		.byte	85
 2062 042d AA        		.byte	-86
 2063 042e 55        		.byte	85
 2064 042f AA        		.byte	-86
 2065 0430 55        		.byte	85
 2066 0431 AA        		.byte	-86
 2067 0432 55        		.byte	85
 2068 0433 AA        		.byte	-86
 2069 0434 55        		.byte	85
 2070 0435 AA        		.byte	-86
 2071 0436 55        		.byte	85
 2072 0437 AA        		.byte	-86
 2073 0438 55        		.byte	85
 2074 0439 AA        		.byte	-86
 2075 043a 55        		.byte	85
 2076 043b AA        		.byte	-86
 2077 043c 55        		.byte	85
 2078 043d AA        		.byte	-86
 2079 043e 55        		.byte	85
 2080 043f AA        		.byte	-86
 2081 0440 55        		.byte	85
 2082 0441 AA        		.byte	-86
 2083 0442 55        		.byte	85
 2084 0443 AA        		.byte	-86
 2085 0444 55        		.byte	85
 2086 0445 AA        		.byte	-86
 2087 0446 55        		.byte	85
 2088 0447 AA        		.byte	-86
 2089 0448 55        		.byte	85
 2090 0449 AA        		.byte	-86
 2091 044a 55        		.byte	85
 2092 044b AA        		.byte	-86
 2093 044c 55        		.byte	85
 2094 044d AA        		.byte	-86
 2095 044e 55        		.byte	85
 2096 044f AA        		.byte	-86
 2097 0450 55        		.byte	85
 2098 0451 AA        		.byte	-86
 2099 0452 55        		.byte	85
 2100 0453 AA        		.byte	-86
 2101 0454 55        		.byte	85
 2102 0455 AA        		.byte	-86
 2103 0456 55        		.byte	85
 2104 0457 AA        		.byte	-86
 2105 0458 55        		.byte	85
 2106 0459 AA        		.byte	-86
 2107 045a 55        		.byte	85
 2108 045b AA        		.byte	-86
 2109 045c 55        		.byte	85
 2110 045d AA        		.byte	-86
 2111 045e 55        		.byte	85
 2112 045f AA        		.byte	-86
 2113 0460 55        		.byte	85
 2114 0461 AA        		.byte	-86
 2115 0462 55        		.byte	85
 2116 0463 AA        		.byte	-86
 2117 0464 55        		.byte	85
 2118 0465 AA        		.byte	-86
 2119 0466 55        		.byte	85
 2120 0467 AA        		.byte	-86
 2121 0468 55        		.byte	85
 2122 0469 AA        		.byte	-86
 2123 046a 55        		.byte	85
 2124 046b AA        		.byte	-86
 2125 046c 55        		.byte	85
 2126 046d AA        		.byte	-86
 2127 046e 55        		.byte	85
 2128 046f AA        		.byte	-86
 2129 0470 55        		.byte	85
 2130 0471 AA        		.byte	-86
 2131 0472 55        		.byte	85
 2132 0473 AA        		.byte	-86
 2133 0474 55        		.byte	85
 2134 0475 AA        		.byte	-86
 2135 0476 55        		.byte	85
 2136 0477 AA        		.byte	-86
 2137 0478 55        		.byte	85
 2138 0479 AA        		.byte	-86
 2139 047a 55        		.byte	85
 2140 047b AA        		.byte	-86
 2141 047c 55        		.byte	85
 2142 047d AA        		.byte	-86
 2143 047e 55        		.byte	85
 2144 047f AA        		.byte	-86
 2145 0480 55        		.byte	85
 2146 0481 AA        		.byte	-86
 2147 0482 55        		.byte	85
 2148 0483 AA        		.byte	-86
 2149 0484 55        		.byte	85
 2150 0485 AA        		.byte	-86
 2151 0486 55        		.byte	85
 2152 0487 AA        		.byte	-86
 2153 0488 55        		.byte	85
 2154 0489 AA        		.byte	-86
 2155 048a 55        		.byte	85
 2156 048b AA        		.byte	-86
 2157 048c 55        		.byte	85
 2158 048d AA        		.byte	-86
 2159 048e 55        		.byte	85
 2160 048f AA        		.byte	-86
 2161 0490 55        		.byte	85
 2162 0491 AA        		.byte	-86
 2163 0492 55        		.byte	85
 2164 0493 AA        		.byte	-86
 2165 0494 55        		.byte	85
 2166 0495 AA        		.byte	-86
 2167 0496 55        		.byte	85
 2168 0497 AA        		.byte	-86
 2169 0498 55        		.byte	85
 2170 0499 AA        		.byte	-86
 2171 049a 55        		.byte	85
 2172 049b AA        		.byte	-86
 2173 049c 55        		.byte	85
 2174 049d AA        		.byte	-86
 2175 049e 55        		.byte	85
 2176 049f AA        		.byte	-86
 2177 04a0 55        		.byte	85
 2178 04a1 AA        		.byte	-86
 2179 04a2 55        		.byte	85
 2180 04a3 AA        		.byte	-86
 2181 04a4 55        		.byte	85
 2182 04a5 AA        		.byte	-86
 2183 04a6 55        		.byte	85
 2184 04a7 AA        		.byte	-86
 2185 04a8 55        		.byte	85
 2186 04a9 AA        		.byte	-86
 2187 04aa 55        		.byte	85
 2188 04ab AA        		.byte	-86
 2189 04ac 55        		.byte	85
 2190 04ad AA        		.byte	-86
 2191 04ae 55        		.byte	85
 2192 04af AA        		.byte	-86
 2193 04b0 55        		.byte	85
 2194 04b1 AA        		.byte	-86
 2195 04b2 55        		.byte	85
 2196 04b3 AA        		.byte	-86
 2197 04b4 55        		.byte	85
 2198 04b5 AA        		.byte	-86
 2199 04b6 55        		.byte	85
 2200 04b7 AA        		.byte	-86
 2201 04b8 55        		.byte	85
 2202 04b9 AA        		.byte	-86
 2203 04ba 55        		.byte	85
 2204 04bb AA        		.byte	-86
 2205 04bc 55        		.byte	85
 2206 04bd AA        		.byte	-86
 2207 04be 55        		.byte	85
 2208 04bf AA        		.byte	-86
 2209 04c0 55        		.byte	85
 2210 04c1 AA        		.byte	-86
 2211 04c2 55        		.byte	85
 2212 04c3 AA        		.byte	-86
 2213 04c4 55        		.byte	85
 2214 04c5 AA        		.byte	-86
 2215 04c6 55        		.byte	85
 2216 04c7 AA        		.byte	-86
 2217 04c8 55        		.byte	85
 2218 04c9 AA        		.byte	-86
 2219 04ca 55        		.byte	85
 2220 04cb AA        		.byte	-86
 2221 04cc 55        		.byte	85
 2222 04cd AA        		.byte	-86
 2223 04ce 55        		.byte	85
 2224 04cf AA        		.byte	-86
 2225 04d0 55        		.byte	85
 2226 04d1 AA        		.byte	-86
 2227 04d2 55        		.byte	85
 2228 04d3 AA        		.byte	-86
 2229 04d4 55        		.byte	85
 2230 04d5 AA        		.byte	-86
 2231 04d6 55        		.byte	85
 2232 04d7 AA        		.byte	-86
 2233 04d8 55        		.byte	85
 2234 04d9 AA        		.byte	-86
 2235 04da 55        		.byte	85
 2236 04db AA        		.byte	-86
 2237 04dc 55        		.byte	85
 2238 04dd AA        		.byte	-86
 2239 04de 55        		.byte	85
 2240 04df AA        		.byte	-86
 2241 04e0 55        		.byte	85
 2242 04e1 AA        		.byte	-86
 2243 04e2 55        		.byte	85
 2244 04e3 AA        		.byte	-86
 2245 04e4 55        		.byte	85
 2246 04e5 AA        		.byte	-86
 2247 04e6 55        		.byte	85
 2248 04e7 AA        		.byte	-86
 2249 04e8 55        		.byte	85
 2250 04e9 AA        		.byte	-86
 2251 04ea 55        		.byte	85
 2252 04eb AA        		.byte	-86
 2253 04ec 55        		.byte	85
 2254 04ed AA        		.byte	-86
 2255 04ee 55        		.byte	85
 2256 04ef AA        		.byte	-86
 2257 04f0 55        		.byte	85
 2258 04f1 AA        		.byte	-86
 2259 04f2 55        		.byte	85
 2260 04f3 AA        		.byte	-86
 2261 04f4 55        		.byte	85
 2262 04f5 AA        		.byte	-86
 2263 04f6 55        		.byte	85
 2264 04f7 AA        		.byte	-86
 2265 04f8 55        		.byte	85
 2266 04f9 AA        		.byte	-86
 2267 04fa 55        		.byte	85
 2268 04fb AA        		.byte	-86
 2269 04fc 55        		.byte	85
 2270 04fd AA        		.byte	-86
 2271 04fe 55        		.byte	85
 2272 04ff AA        		.byte	-86
 2273 0500 55        		.byte	85
 2274 0501 AA        		.byte	-86
 2275 0502 55        		.byte	85
 2276 0503 AA        		.byte	-86
 2277 0504 55        		.byte	85
 2278 0505 AA        		.byte	-86
 2279 0506 55        		.byte	85
 2280 0507 AA        		.byte	-86
 2281 0508 55        		.byte	85
 2282 0509 AA        		.byte	-86
 2283 050a 55        		.byte	85
 2284 050b AA        		.byte	-86
 2285 050c 55        		.byte	85
 2286 050d AA        		.byte	-86
 2287 050e 55        		.byte	85
 2288 050f AA        		.byte	-86
 2289 0510 55        		.byte	85
 2290 0511 AA        		.byte	-86
 2291 0512 55        		.byte	85
 2292 0513 AA        		.byte	-86
 2293 0514 55        		.byte	85
 2294 0515 AA        		.byte	-86
 2295 0516 55        		.byte	85
 2296 0517 AA        		.byte	-86
 2297 0518 55        		.byte	85
 2298 0519 AA        		.byte	-86
 2299 051a 55        		.byte	85
 2300 051b AA        		.byte	-86
 2301 051c 55        		.byte	85
 2302 051d AA        		.byte	-86
 2303 051e 55        		.byte	85
 2304 051f AA        		.byte	-86
 2305 0520 55        		.byte	85
 2306 0521 AA        		.byte	-86
 2307 0522 55        		.byte	85
 2308 0523 AA        		.byte	-86
 2309 0524 55        		.byte	85
 2310 0525 AA        		.byte	-86
 2311 0526 55        		.byte	85
 2312 0527 AA        		.byte	-86
 2313 0528 55        		.byte	85
 2314 0529 AA        		.byte	-86
 2315 052a 55        		.byte	85
 2316 052b AA        		.byte	-86
 2317 052c 55        		.byte	85
 2318 052d AA        		.byte	-86
 2319 052e 55        		.byte	85
 2320 052f AA        		.byte	-86
 2321 0530 55        		.byte	85
 2322 0531 AA        		.byte	-86
 2323 0532 55        		.byte	85
 2324 0533 AA        		.byte	-86
 2325 0534 55        		.byte	85
 2326 0535 AA        		.byte	-86
 2327 0536 55        		.byte	85
 2328 0537 AA        		.byte	-86
 2329 0538 55        		.byte	85
 2330 0539 AA        		.byte	-86
 2331 053a 55        		.byte	85
 2332 053b AA        		.byte	-86
 2333 053c 55        		.byte	85
 2334 053d AA        		.byte	-86
 2335 053e 55        		.byte	85
 2336 053f AA        		.byte	-86
 2337 0540 55        		.byte	85
 2338 0541 AA        		.byte	-86
 2339 0542 55        		.byte	85
 2340 0543 AA        		.byte	-86
 2341 0544 55        		.byte	85
 2342 0545 AA        		.byte	-86
 2343 0546 55        		.byte	85
 2344 0547 AA        		.byte	-86
 2345 0548 55        		.byte	85
 2346 0549 AA        		.byte	-86
 2347 054a 55        		.byte	85
 2348 054b AA        		.byte	-86
 2349 054c 55        		.byte	85
 2350 054d AA        		.byte	-86
 2351 054e 55        		.byte	85
 2352 054f AA        		.byte	-86
 2353 0550 55        		.byte	85
 2354 0551 AA        		.byte	-86
 2355 0552 55        		.byte	85
 2356 0553 AA        		.byte	-86
 2357 0554 55        		.byte	85
 2358 0555 AA        		.byte	-86
 2359 0556 55        		.byte	85
 2360 0557 AA        		.byte	-86
 2361 0558 55        		.byte	85
 2362 0559 AA        		.byte	-86
 2363 055a 55        		.byte	85
 2364 055b AA        		.byte	-86
 2365 055c 55        		.byte	85
 2366 055d AA        		.byte	-86
 2367 055e 55        		.byte	85
 2368 055f AA        		.byte	-86
 2369 0560 55        		.byte	85
 2370 0561 AA        		.byte	-86
 2371 0562 55        		.byte	85
 2372 0563 AA        		.byte	-86
 2373 0564 55        		.byte	85
 2374 0565 AA        		.byte	-86
 2375 0566 55        		.byte	85
 2376 0567 AA        		.byte	-86
 2377 0568 55        		.byte	85
 2378 0569 AA        		.byte	-86
 2379 056a 55        		.byte	85
 2380 056b AA        		.byte	-86
 2381 056c 55        		.byte	85
 2382 056d AA        		.byte	-86
 2383 056e 55        		.byte	85
 2384 056f AA        		.byte	-86
 2385 0570 55        		.byte	85
 2386 0571 AA        		.byte	-86
 2387 0572 55        		.byte	85
 2388 0573 AA        		.byte	-86
 2389 0574 55        		.byte	85
 2390 0575 AA        		.byte	-86
 2391 0576 55        		.byte	85
 2392 0577 AA        		.byte	-86
 2393 0578 55        		.byte	85
 2394 0579 AA        		.byte	-86
 2395 057a 55        		.byte	85
 2396 057b AA        		.byte	-86
 2397 057c 55        		.byte	85
 2398 057d AA        		.byte	-86
 2399 057e 55        		.byte	85
 2400 057f AA        		.byte	-86
 2401 0580 55        		.byte	85
 2402 0581 AA        		.byte	-86
 2403 0582 55        		.byte	85
 2404 0583 AA        		.byte	-86
 2405 0584 55        		.byte	85
 2406 0585 AA        		.byte	-86
 2407 0586 55        		.byte	85
 2408 0587 AA        		.byte	-86
 2409 0588 55        		.byte	85
 2410 0589 AA        		.byte	-86
 2411 058a 55        		.byte	85
 2412 058b AA        		.byte	-86
 2413 058c 55        		.byte	85
 2414 058d AA        		.byte	-86
 2415 058e 55        		.byte	85
 2416 058f AA        		.byte	-86
 2417 0590 55        		.byte	85
 2418 0591 AA        		.byte	-86
 2419 0592 55        		.byte	85
 2420 0593 AA        		.byte	-86
 2421 0594 55        		.byte	85
 2422 0595 AA        		.byte	-86
 2423 0596 55        		.byte	85
 2424 0597 AA        		.byte	-86
 2425 0598 55        		.byte	85
 2426 0599 AA        		.byte	-86
 2427 059a 55        		.byte	85
 2428 059b AA        		.byte	-86
 2429 059c 55        		.byte	85
 2430 059d AA        		.byte	-86
 2431 059e 55        		.byte	85
 2432 059f AA        		.byte	-86
 2433 05a0 55        		.byte	85
 2434 05a1 AA        		.byte	-86
 2435 05a2 55        		.byte	85
 2436 05a3 AA        		.byte	-86
 2437 05a4 55        		.byte	85
 2438 05a5 AA        		.byte	-86
 2439 05a6 55        		.byte	85
 2440 05a7 AA        		.byte	-86
 2441 05a8 55        		.byte	85
 2442 05a9 AA        		.byte	-86
 2443 05aa 55        		.byte	85
 2444 05ab AA        		.byte	-86
 2445 05ac 55        		.byte	85
 2446 05ad AA        		.byte	-86
 2447 05ae 55        		.byte	85
 2448 05af AA        		.byte	-86
 2449 05b0 55        		.byte	85
 2450 05b1 AA        		.byte	-86
 2451 05b2 55        		.byte	85
 2452 05b3 AA        		.byte	-86
 2453 05b4 55        		.byte	85
 2454 05b5 AA        		.byte	-86
 2455 05b6 55        		.byte	85
 2456 05b7 AA        		.byte	-86
 2457 05b8 55        		.byte	85
 2458 05b9 AA        		.byte	-86
 2459 05ba 55        		.byte	85
 2460 05bb AA        		.byte	-86
 2461 05bc 55        		.byte	85
 2462 05bd AA        		.byte	-86
 2463 05be 55        		.byte	85
 2464 05bf AA        		.byte	-86
 2465 05c0 55        		.byte	85
 2466 05c1 AA        		.byte	-86
 2467 05c2 55        		.byte	85
 2468 05c3 AA        		.byte	-86
 2469 05c4 55        		.byte	85
 2470 05c5 AA        		.byte	-86
 2471 05c6 55        		.byte	85
 2472 05c7 AA        		.byte	-86
 2473 05c8 55        		.byte	85
 2474 05c9 AA        		.byte	-86
 2475 05ca 55        		.byte	85
 2476 05cb AA        		.byte	-86
 2477 05cc 55        		.byte	85
 2478 05cd AA        		.byte	-86
 2479 05ce 55        		.byte	85
 2480 05cf AA        		.byte	-86
 2481 05d0 55        		.byte	85
 2482 05d1 AA        		.byte	-86
 2483 05d2 55        		.byte	85
 2484 05d3 AA        		.byte	-86
 2485 05d4 55        		.byte	85
 2486 05d5 AA        		.byte	-86
 2487 05d6 55        		.byte	85
 2488 05d7 AA        		.byte	-86
 2489 05d8 55        		.byte	85
 2490 05d9 AA        		.byte	-86
 2491 05da 55        		.byte	85
 2492 05db AA        		.byte	-86
 2493 05dc 55        		.byte	85
 2494 05dd AA        		.byte	-86
 2495 05de 55        		.byte	85
 2496 05df AA        		.byte	-86
 2497 05e0 55        		.byte	85
 2498 05e1 AA        		.byte	-86
 2499 05e2 55        		.byte	85
 2500 05e3 AA        		.byte	-86
 2501 05e4 55        		.byte	85
 2504               		.text
 2506               	.Letext0:
 2507               		.ident	"GCC: (GNU) 4.7.2"
 2508               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:00000000 ssd1306_control_panel.c
     /tmp/ccomp96D.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccomp96D.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccomp96D.s:4      *ABS*:0000003f __SREG__
     /tmp/ccomp96D.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccomp96D.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccomp96D.s:82     .text:00000000 setup_adc
     /tmp/ccomp96D.s:145    .text:0000003e setup_i2c
     /tmp/ccomp96D.s:279    .text:000000ec drawPixel
     /tmp/ccomp96D.s:1477   .data:000001e5 buffer
     /tmp/ccomp96D.s:331    .text:00000128 clearBuffer
     /tmp/ccomp96D.s:363    .text:0000013c drawBuffer
     /tmp/ccomp96D.s:523    .text:000001f0 lcd_draw_char
     /tmp/ccomp96D.s:989    .data:00000000 Ascii_1
     /tmp/ccomp96D.s:590    .text:0000022c lcd_draw_string
     /tmp/ccomp96D.s:664    .text:00000276 sample_adc_channel
     /tmp/ccomp96D.s:878    .text.startup:00000000 main

UNDEFINED SYMBOLS
i2c_write
i2c_start
i2c_stop
itoa
i2c_init
__do_copy_data
